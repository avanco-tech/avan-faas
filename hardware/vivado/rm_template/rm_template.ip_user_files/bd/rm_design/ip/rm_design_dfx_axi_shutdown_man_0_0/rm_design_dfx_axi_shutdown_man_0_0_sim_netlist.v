// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2020.2 (lin64) Build 3064766 Wed Nov 18 09:12:47 MST 2020
// Date        : Wed Jun 30 14:22:37 2021
// Host        : avanpc running 64-bit Ubuntu 18.04.5 LTS
// Command     : write_verilog -force -mode funcsim
//               /home/avanpc/avanco/vivado_projects/dynamic_function_exchange/dfx_project/rm_template_ila/rm_template.gen/sources_1/bd/rm_design/ip/rm_design_dfx_axi_shutdown_man_0_0/rm_design_dfx_axi_shutdown_man_0_0_sim_netlist.v
// Design      : rm_design_dfx_axi_shutdown_man_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xczu7ev-ffvc1156-2-e
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "rm_design_dfx_axi_shutdown_man_0_0,dfx_axi_shutdown_manager_v1_0_0,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "dfx_axi_shutdown_manager_v1_0_0,Vivado 2020.2" *) 
(* NotValidForBitStream *)
module rm_design_dfx_axi_shutdown_man_0_0
   (clk,
    resetn,
    shutdown_requested,
    in_shutdown,
    irq,
    wr_irq,
    rd_irq,
    wr_in_shutdown,
    rd_in_shutdown,
    request_shutdown,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clk_intf CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clk_intf, ASSOCIATED_BUSIF M_AXI:S_AXI:S_AXI_CTRL, ASSOCIATED_RESET resetn:reset, FREQ_HZ 200000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, CLK_DOMAIN rm_design_clk_240MHz, INSERT_VIP 0" *) input clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 resetn_intf RST" *) (* x_interface_parameter = "XIL_INTERFACENAME resetn_intf, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input resetn;
  output shutdown_requested;
  output in_shutdown;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output irq;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 wr_irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME wr_irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output wr_irq;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 rd_irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME rd_irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output rd_irq;
  output wr_in_shutdown;
  output rd_in_shutdown;
  input request_shutdown;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 128, PROTOCOL AXI4, FREQ_HZ 200000000, ID_WIDTH 6, ADDR_WIDTH 31, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, MAX_BURST_LENGTH 4, PHASE 0.000, CLK_DOMAIN rm_design_clk_240MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [5:0]s_axi_awid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [30:0]s_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input s_axi_awlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWUSER" *) input [0:0]s_axi_awuser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 128, PROTOCOL AXI4, FREQ_HZ 200000000, ID_WIDTH 6, ADDR_WIDTH 31, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN rm_design_clk_240MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [5:0]m_axi_awid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [30:0]m_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output m_axi_awlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWUSER" *) output [0:0]m_axi_awuser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [127:0]s_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [15:0]s_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [127:0]m_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [15:0]m_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BID" *) output [5:0]s_axi_bid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BID" *) input [5:0]m_axi_bid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARID" *) input [5:0]s_axi_arid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [30:0]s_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input s_axi_arlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARUSER" *) input [0:0]s_axi_aruser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARID" *) output [5:0]m_axi_arid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [30:0]m_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output m_axi_arlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARUSER" *) output [0:0]m_axi_aruser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RID" *) output [5:0]s_axi_rid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [127:0]s_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) input s_axi_rready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RID" *) input [5:0]m_axi_rid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [127:0]m_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) output m_axi_rready;

  wire clk;
  wire in_shutdown;
  wire irq;
  wire [30:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [5:0]m_axi_arid;
  wire [7:0]m_axi_arlen;
  wire m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire [0:0]m_axi_aruser;
  wire m_axi_arvalid;
  wire [30:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [5:0]m_axi_awid;
  wire [7:0]m_axi_awlen;
  wire m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire [0:0]m_axi_awuser;
  wire m_axi_awvalid;
  wire [5:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [127:0]m_axi_rdata;
  wire [5:0]m_axi_rid;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [127:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [15:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire rd_in_shutdown;
  wire rd_irq;
  wire request_shutdown;
  wire resetn;
  wire [30:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [5:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [30:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [5:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire [5:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [127:0]s_axi_rdata;
  wire [5:0]s_axi_rid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [127:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [15:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire shutdown_requested;
  wire wr_in_shutdown;
  wire wr_irq;
  wire NLW_U0_s_axi_ctrl_arready_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_awready_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_wready_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_ctrl_bresp_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_ctrl_rdata_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_ctrl_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;

  (* C_CTRL_ADDR_WIDTH = "32" *) 
  (* C_CTRL_DATA_WIDTH = "32" *) 
  (* C_CTRL_INTERFACE_TYPE = "0" *) 
  (* C_DP_AXI_ADDR_WIDTH = "31" *) 
  (* C_DP_AXI_ARUSER_WIDTH = "1" *) 
  (* C_DP_AXI_AWUSER_WIDTH = "1" *) 
  (* C_DP_AXI_BUSER_WIDTH = "1" *) 
  (* C_DP_AXI_DATA_WIDTH = "128" *) 
  (* C_DP_AXI_ID_WIDTH = "6" *) 
  (* C_DP_AXI_RESP = "0" *) 
  (* C_DP_AXI_RUSER_WIDTH = "1" *) 
  (* C_DP_AXI_WUSER_WIDTH = "1" *) 
  (* C_DP_PROTOCOL = "AXI4MM" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_RESET_ACTIVE_LEVEL = "1'b0" *) 
  (* C_RP_IS_MASTER = "1'b1" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* is_du_within_envelope = "true" *) 
  rm_design_dfx_axi_shutdown_man_0_0_dfx_axi_shutdown_manager_v1_0_0 U0
       (.clk(clk),
        .in_shutdown(in_shutdown),
        .irq(irq),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_arid(m_axi_arid),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_aruser(m_axi_aruser),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awid(m_axi_awid),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awuser(m_axi_awuser),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(m_axi_wvalid),
        .rd_in_shutdown(rd_in_shutdown),
        .rd_irq(rd_irq),
        .request_shutdown(request_shutdown),
        .reset(1'b0),
        .resetn(resetn),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arid(s_axi_arid),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arready(s_axi_arready),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_aruser(s_axi_aruser),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awuser(s_axi_awuser),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_ctrl_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_arready(NLW_U0_s_axi_ctrl_arready_UNCONNECTED),
        .s_axi_ctrl_arvalid(1'b0),
        .s_axi_ctrl_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_awready(NLW_U0_s_axi_ctrl_awready_UNCONNECTED),
        .s_axi_ctrl_awvalid(1'b0),
        .s_axi_ctrl_bready(1'b0),
        .s_axi_ctrl_bresp(NLW_U0_s_axi_ctrl_bresp_UNCONNECTED[1:0]),
        .s_axi_ctrl_bvalid(NLW_U0_s_axi_ctrl_bvalid_UNCONNECTED),
        .s_axi_ctrl_rdata(NLW_U0_s_axi_ctrl_rdata_UNCONNECTED[31:0]),
        .s_axi_ctrl_rready(1'b0),
        .s_axi_ctrl_rresp(NLW_U0_s_axi_ctrl_rresp_UNCONNECTED[1:0]),
        .s_axi_ctrl_rvalid(NLW_U0_s_axi_ctrl_rvalid_UNCONNECTED),
        .s_axi_ctrl_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_wready(NLW_U0_s_axi_ctrl_wready_UNCONNECTED),
        .s_axi_ctrl_wvalid(1'b0),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rid(s_axi_rid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(s_axi_wvalid),
        .shutdown_requested(shutdown_requested),
        .wr_in_shutdown(wr_in_shutdown),
        .wr_irq(wr_irq));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_0
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_11
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_14
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_17
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_2
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_20
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_23
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_26
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_29
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_32
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_35
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_38
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_41
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_44
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_47
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_5
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_50
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_53
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_8
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_1
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_12
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_15
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_18
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_21
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_24
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_27
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_3
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_30
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_33
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_36
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_39
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_42
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_45
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_48
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_51
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_54
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_6
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_9
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire \gen_fwft.ram_regout_en ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [0:0]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb({\^dout ,\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [0]}),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_44 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_45 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_46 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_47 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_48 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_49 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .\count_value_i_reg[3] (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__4
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__4 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_26 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_27 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_28 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_29 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_30 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_31 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire \gen_fwft.ram_regout_en ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [0:0]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__5 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb({\^dout ,\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [0]}),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_20 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_21 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_22 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_23 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_24 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_25 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .\count_value_i_reg[3] (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__6
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__6 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_50 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_51 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_52 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_53 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_54 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_55 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2336" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "146" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [145:0]din;
  wire [144:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [145:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [145:145]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[145] = \<const0> ;
  assign dout[144:0] = \^dout [144:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "146" *) 
  (* BYTE_WRITE_WIDTH_B = "146" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2336" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "146" *) 
  (* P_MIN_WIDTH_DATA_A = "146" *) 
  (* P_MIN_WIDTH_DATA_B = "146" *) 
  (* P_MIN_WIDTH_DATA_ECC = "146" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "146" *) 
  (* P_WIDTH_COL_WRITE_B = "146" *) 
  (* READ_DATA_WIDTH_A = "146" *) 
  (* READ_DATA_WIDTH_B = "146" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "146" *) 
  (* WRITE_DATA_WIDTH_B = "146" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "148" *) 
  (* rstb_loop_iter = "148" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [145:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [145],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_8 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_9 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_10 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_11 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_12 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_13 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2336" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "146" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [145:0]din;
  wire [145:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [145:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "146" *) 
  (* BYTE_WRITE_WIDTH_B = "146" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2336" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "146" *) 
  (* P_MIN_WIDTH_DATA_A = "146" *) 
  (* P_MIN_WIDTH_DATA_B = "146" *) 
  (* P_MIN_WIDTH_DATA_ECC = "146" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "146" *) 
  (* P_WIDTH_COL_WRITE_B = "146" *) 
  (* READ_DATA_WIDTH_A = "146" *) 
  (* READ_DATA_WIDTH_B = "146" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "146" *) 
  (* WRITE_DATA_WIDTH_B = "146" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "148" *) 
  (* rstb_loop_iter = "148" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[144:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [145:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_14 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_15 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_16 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_17 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_18 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_19 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "144" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "9" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "4" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [8:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [8:8]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "9" *) 
  (* BYTE_WRITE_WIDTH_B = "9" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "144" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "9" *) 
  (* P_MIN_WIDTH_DATA_A = "9" *) 
  (* P_MIN_WIDTH_DATA_B = "9" *) 
  (* P_MIN_WIDTH_DATA_ECC = "9" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "9" *) 
  (* P_WIDTH_COL_WRITE_B = "9" *) 
  (* READ_DATA_WIDTH_A = "9" *) 
  (* READ_DATA_WIDTH_B = "9" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "9" *) 
  (* WRITE_DATA_WIDTH_B = "9" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "12" *) 
  (* rstb_loop_iter = "12" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[7:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [8:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [8],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_0 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_1 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "144" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "9" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "4" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [8:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [8:8]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "9" *) 
  (* BYTE_WRITE_WIDTH_B = "9" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "144" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "9" *) 
  (* P_MIN_WIDTH_DATA_A = "9" *) 
  (* P_MIN_WIDTH_DATA_B = "9" *) 
  (* P_MIN_WIDTH_DATA_ECC = "9" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "9" *) 
  (* P_WIDTH_COL_WRITE_B = "9" *) 
  (* READ_DATA_WIDTH_A = "9" *) 
  (* READ_DATA_WIDTH_B = "9" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "9" *) 
  (* WRITE_DATA_WIDTH_B = "9" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "12" *) 
  (* rstb_loop_iter = "12" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[7:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [8:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [8],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_2 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_3 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_4 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_5 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_6 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_7 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2208" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "138" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [137:0]din;
  wire [137:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [137:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [136:136]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[137] = \^dout [137];
  assign dout[136] = \<const0> ;
  assign dout[135:0] = \^dout [135:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "138" *) 
  (* BYTE_WRITE_WIDTH_B = "138" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2208" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "138" *) 
  (* P_MIN_WIDTH_DATA_A = "138" *) 
  (* P_MIN_WIDTH_DATA_B = "138" *) 
  (* P_MIN_WIDTH_DATA_ECC = "138" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "138" *) 
  (* P_WIDTH_COL_WRITE_B = "138" *) 
  (* READ_DATA_WIDTH_A = "138" *) 
  (* READ_DATA_WIDTH_B = "138" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "138" *) 
  (* WRITE_DATA_WIDTH_B = "138" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "140" *) 
  (* rstb_loop_iter = "140" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [137:0]),
        .doutb(\^dout ),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_32 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_33 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_34 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_35 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_36 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_37 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2208" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "138" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [137:0]din;
  wire [137:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [137:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "138" *) 
  (* BYTE_WRITE_WIDTH_B = "138" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2208" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "138" *) 
  (* P_MIN_WIDTH_DATA_A = "138" *) 
  (* P_MIN_WIDTH_DATA_B = "138" *) 
  (* P_MIN_WIDTH_DATA_ECC = "138" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "138" *) 
  (* P_WIDTH_COL_WRITE_B = "138" *) 
  (* READ_DATA_WIDTH_A = "138" *) 
  (* READ_DATA_WIDTH_B = "138" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "138" *) 
  (* WRITE_DATA_WIDTH_B = "138" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "140" *) 
  (* rstb_loop_iter = "140" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({din[137],1'b0,din[135:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [137:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_38 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_39 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_40 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_41 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_42 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_43 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_10
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_16
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_22
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_28
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_34
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_4
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_40
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_46
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_52
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_13
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_19
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_25
   (E,
    Q,
    wr_en,
    \count_value_i_reg[3] ,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input \count_value_i_reg[3] ;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire \count_value_i_reg[3] ;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\count_value_i_reg[3] ),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_31
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_37
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_43
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_49
   (E,
    Q,
    wr_en,
    \count_value_i_reg[3] ,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input \count_value_i_reg[3] ;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire \count_value_i_reg[3] ;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\count_value_i_reg[3] ),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_55
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_7
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [0:0]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({\^dout ,NLW_xpm_fifo_base_inst_dout_UNCONNECTED[0]}),
        .empty(empty),
        .full(NLW_xpm_fifo_base_inst_full_UNCONNECTED),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__4
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__4 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [0:0]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__5 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({\^dout ,NLW_xpm_fifo_base_inst_dout_UNCONNECTED[0]}),
        .empty(empty),
        .full(NLW_xpm_fifo_base_inst_full_UNCONNECTED),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__6
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__6 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "146" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized1
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [145:0]din;
  wire [144:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [145:145]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[145] = \<const0> ;
  assign dout[144:0] = \^dout [144:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2336" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "146" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "146" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[145],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "146" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized1__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [145:0]din;
  wire [145:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2336" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "146" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "146" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[144:0]}),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "9" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized3
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [8:8]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "144" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "9" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "9" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "4" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[7:0]}),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[8],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "9" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized3__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [8:8]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "144" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "9" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "9" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "4" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[7:0]}),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[8],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(rd_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "138" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [137:0]din;
  wire [137:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [136:136]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[137] = \^dout [137];
  assign dout[136] = \<const0> ;
  assign dout[135:0] = \^dout [135:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2208" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "138" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "138" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(\^dout ),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "138" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized5__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [137:0]din;
  wire [137:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2208" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "138" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "138" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  rm_design_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({din[137],1'b0,din[135:0]}),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(rd_rst_busy));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:1]\^doutb ;
  wire ena;
  wire enb;
  wire [67:1]\gen_rd_b.doutb_reg ;
  wire [67:1]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[67:1] = \^doutb [67:1];
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA({\gen_rd_b.doutb_reg0 [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 }),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:0]doutb;
  wire ena;
  wire enb;
  wire [67:0]\gen_rd_b.doutb_reg ;
  wire [67:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__5
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:1]\^doutb ;
  wire ena;
  wire enb;
  wire [67:1]\gen_rd_b.doutb_reg ;
  wire [67:1]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[67:1] = \^doutb [67:1];
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA({\gen_rd_b.doutb_reg0 [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 }),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__6
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:0]doutb;
  wire ena;
  wire enb;
  wire [67:0]\gen_rd_b.doutb_reg ;
  wire [67:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "146" *) (* BYTE_WRITE_WIDTH_B = "146" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2336" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "146" *) (* P_MIN_WIDTH_DATA_A = "146" *) (* P_MIN_WIDTH_DATA_B = "146" *) 
(* P_MIN_WIDTH_DATA_ECC = "146" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "146" *) (* P_WIDTH_COL_WRITE_B = "146" *) (* READ_DATA_WIDTH_A = "146" *) 
(* READ_DATA_WIDTH_B = "146" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "146" *) (* WRITE_DATA_WIDTH_B = "146" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "148" *) 
(* rstb_loop_iter = "148" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [145:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [145:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [145:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [145:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [145:0]dina;
  wire [144:0]\^doutb ;
  wire ena;
  wire enb;
  wire [144:0]\gen_rd_b.doutb_reg ;
  wire [144:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_n_4 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[145] = \<const0> ;
  assign douta[144] = \<const0> ;
  assign douta[143] = \<const0> ;
  assign douta[142] = \<const0> ;
  assign douta[141] = \<const0> ;
  assign douta[140] = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[145] = \<const0> ;
  assign doutb[144:0] = \^doutb [144:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[138] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [138]),
        .Q(\gen_rd_b.doutb_reg [138]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[139] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [139]),
        .Q(\gen_rd_b.doutb_reg [139]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[140] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [140]),
        .Q(\gen_rd_b.doutb_reg [140]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[141] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [141]),
        .Q(\gen_rd_b.doutb_reg [141]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[142] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [142]),
        .Q(\gen_rd_b.doutb_reg [142]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[143] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [143]),
        .Q(\gen_rd_b.doutb_reg [143]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[144] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [144]),
        .Q(\gen_rd_b.doutb_reg [144]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(\^doutb [100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(\^doutb [101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(\^doutb [102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(\^doutb [103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(\^doutb [104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(\^doutb [105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(\^doutb [106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(\^doutb [107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(\^doutb [108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(\^doutb [109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(\^doutb [110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(\^doutb [111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(\^doutb [112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(\^doutb [113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(\^doutb [114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(\^doutb [115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(\^doutb [116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(\^doutb [117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(\^doutb [118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(\^doutb [119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(\^doutb [120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(\^doutb [121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(\^doutb [122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(\^doutb [123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(\^doutb [124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(\^doutb [125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(\^doutb [126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(\^doutb [127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(\^doutb [128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(\^doutb [129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(\^doutb [130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(\^doutb [131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(\^doutb [132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(\^doutb [133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(\^doutb [134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(\^doutb [135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(\^doutb [136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(\^doutb [137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][138] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [138]),
        .Q(\^doutb [138]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][139] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [139]),
        .Q(\^doutb [139]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][140] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [140]),
        .Q(\^doutb [140]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][141] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [141]),
        .Q(\^doutb [141]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][142] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [142]),
        .Q(\^doutb [142]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][143] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [143]),
        .Q(\^doutb [143]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][144] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [144]),
        .Q(\^doutb [144]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(\^doutb [68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(\^doutb [69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(\^doutb [70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(\^doutb [71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(\^doutb [72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(\^doutb [73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(\^doutb [74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(\^doutb [75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(\^doutb [76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(\^doutb [77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(\^doutb [78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(\^doutb [79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(\^doutb [80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(\^doutb [81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(\^doutb [82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(\^doutb [83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(\^doutb [84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(\^doutb [85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(\^doutb [86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(\^doutb [87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(\^doutb [88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(\^doutb [89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(\^doutb [90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(\^doutb [91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(\^doutb [92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(\^doutb [93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(\^doutb [94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(\^doutb [95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(\^doutb [96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(\^doutb [97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(\^doutb [98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(\^doutb [99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "139" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG(dina[139:138]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\gen_rd_b.doutb_reg0 [139:138]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "140" *) 
  (* ram_slice_end = "145" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[141:140]),
        .DIB(dina[143:142]),
        .DIC(dina[145:144]),
        .DID({1'b0,1'b0}),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [141:140]),
        .DOB(\gen_rd_b.doutb_reg0 [143:142]),
        .DOC({\gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_n_4 ,\gen_rd_b.doutb_reg0 [144]}),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED [1:0]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "146" *) (* BYTE_WRITE_WIDTH_B = "146" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2336" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "146" *) (* P_MIN_WIDTH_DATA_A = "146" *) (* P_MIN_WIDTH_DATA_B = "146" *) 
(* P_MIN_WIDTH_DATA_ECC = "146" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "146" *) (* P_WIDTH_COL_WRITE_B = "146" *) (* READ_DATA_WIDTH_A = "146" *) 
(* READ_DATA_WIDTH_B = "146" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "146" *) (* WRITE_DATA_WIDTH_B = "146" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "148" *) 
(* rstb_loop_iter = "148" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [145:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [145:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [145:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [145:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [145:0]dina;
  wire [145:0]doutb;
  wire ena;
  wire enb;
  wire [145:0]\gen_rd_b.doutb_reg ;
  wire [145:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[145] = \<const0> ;
  assign douta[144] = \<const0> ;
  assign douta[143] = \<const0> ;
  assign douta[142] = \<const0> ;
  assign douta[141] = \<const0> ;
  assign douta[140] = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[138] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [138]),
        .Q(\gen_rd_b.doutb_reg [138]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[139] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [139]),
        .Q(\gen_rd_b.doutb_reg [139]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[140] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [140]),
        .Q(\gen_rd_b.doutb_reg [140]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[141] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [141]),
        .Q(\gen_rd_b.doutb_reg [141]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[142] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [142]),
        .Q(\gen_rd_b.doutb_reg [142]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[143] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [143]),
        .Q(\gen_rd_b.doutb_reg [143]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[144] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [144]),
        .Q(\gen_rd_b.doutb_reg [144]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[145] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [145]),
        .Q(\gen_rd_b.doutb_reg [145]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(doutb[100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(doutb[101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(doutb[102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(doutb[103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(doutb[104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(doutb[105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(doutb[106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(doutb[107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(doutb[108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(doutb[109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(doutb[110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(doutb[111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(doutb[112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(doutb[113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(doutb[114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(doutb[115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(doutb[116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(doutb[117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(doutb[118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(doutb[119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(doutb[120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(doutb[121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(doutb[122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(doutb[123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(doutb[124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(doutb[125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(doutb[126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(doutb[127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(doutb[128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(doutb[129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(doutb[130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(doutb[131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(doutb[132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(doutb[133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(doutb[134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(doutb[135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(doutb[136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(doutb[137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][138] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [138]),
        .Q(doutb[138]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][139] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [139]),
        .Q(doutb[139]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][140] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [140]),
        .Q(doutb[140]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][141] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [141]),
        .Q(doutb[141]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][142] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [142]),
        .Q(doutb[142]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][143] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [143]),
        .Q(doutb[143]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][144] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [144]),
        .Q(doutb[144]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][145] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [145]),
        .Q(doutb[145]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(doutb[68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(doutb[69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(doutb[70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(doutb[71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(doutb[72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(doutb[73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(doutb[74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(doutb[75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(doutb[76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(doutb[77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(doutb[78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(doutb[79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(doutb[80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(doutb[81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(doutb[82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(doutb[83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(doutb[84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(doutb[85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(doutb[86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(doutb[87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(doutb[88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(doutb[89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(doutb[90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(doutb[91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(doutb[92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(doutb[93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(doutb[94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(doutb[95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(doutb[96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(doutb[97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(doutb[98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(doutb[99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "139" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG(dina[139:138]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\gen_rd_b.doutb_reg0 [139:138]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "140" *) 
  (* ram_slice_end = "145" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[141:140]),
        .DIB(dina[143:142]),
        .DIC({1'b0,dina[144]}),
        .DID({1'b0,1'b0}),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [141:140]),
        .DOB(\gen_rd_b.doutb_reg0 [143:142]),
        .DOC(\gen_rd_b.doutb_reg0 [145:144]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED [1:0]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "9" *) (* BYTE_WRITE_WIDTH_B = "9" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "144" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "9" *) (* P_MIN_WIDTH_DATA_A = "9" *) (* P_MIN_WIDTH_DATA_B = "9" *) 
(* P_MIN_WIDTH_DATA_ECC = "9" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "9" *) (* P_WIDTH_COL_WRITE_B = "9" *) (* READ_DATA_WIDTH_A = "9" *) 
(* READ_DATA_WIDTH_B = "9" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "9" *) (* WRITE_DATA_WIDTH_B = "9" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "12" *) 
(* rstb_loop_iter = "12" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [8:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [8:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [8:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [8:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [8:0]dina;
  wire [7:0]\^doutb ;
  wire ena;
  wire enb;
  wire [7:0]\gen_rd_b.doutb_reg ;
  wire [7:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_n_9 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:1]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7:0] = \^doutb [7:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "144" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "8" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE({\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_n_9 }),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "9" *) (* BYTE_WRITE_WIDTH_B = "9" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "144" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "9" *) (* P_MIN_WIDTH_DATA_A = "9" *) (* P_MIN_WIDTH_DATA_B = "9" *) 
(* P_MIN_WIDTH_DATA_ECC = "9" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "9" *) (* P_WIDTH_COL_WRITE_B = "9" *) (* READ_DATA_WIDTH_A = "9" *) 
(* READ_DATA_WIDTH_B = "9" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "9" *) (* WRITE_DATA_WIDTH_B = "9" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "12" *) 
(* rstb_loop_iter = "12" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [8:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [8:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [8:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [8:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [8:0]dina;
  wire [7:0]\^doutb ;
  wire ena;
  wire enb;
  wire [7:0]\gen_rd_b.doutb_reg ;
  wire [7:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7:0] = \^doutb [7:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "144" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "8" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "138" *) (* BYTE_WRITE_WIDTH_B = "138" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2208" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "138" *) (* P_MIN_WIDTH_DATA_A = "138" *) (* P_MIN_WIDTH_DATA_B = "138" *) 
(* P_MIN_WIDTH_DATA_ECC = "138" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "138" *) (* P_WIDTH_COL_WRITE_B = "138" *) (* READ_DATA_WIDTH_A = "138" *) 
(* READ_DATA_WIDTH_B = "138" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "138" *) (* WRITE_DATA_WIDTH_B = "138" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "140" *) 
(* rstb_loop_iter = "140" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [137:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [137:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [137:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [137:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [137:0]dina;
  wire [137:0]\^doutb ;
  wire ena;
  wire enb;
  wire [137:0]\gen_rd_b.doutb_reg ;
  wire [137:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_n_11 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[137] = \^doutb [137];
  assign doutb[136] = \<const0> ;
  assign doutb[135:0] = \^doutb [135:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(\^doutb [100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(\^doutb [101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(\^doutb [102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(\^doutb [103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(\^doutb [104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(\^doutb [105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(\^doutb [106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(\^doutb [107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(\^doutb [108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(\^doutb [109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(\^doutb [110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(\^doutb [111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(\^doutb [112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(\^doutb [113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(\^doutb [114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(\^doutb [115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(\^doutb [116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(\^doutb [117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(\^doutb [118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(\^doutb [119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(\^doutb [120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(\^doutb [121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(\^doutb [122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(\^doutb [123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(\^doutb [124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(\^doutb [125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(\^doutb [126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(\^doutb [127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(\^doutb [128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(\^doutb [129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(\^doutb [130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(\^doutb [131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(\^doutb [132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(\^doutb [133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(\^doutb [134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(\^doutb [135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(\^doutb [137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(\^doutb [68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(\^doutb [69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(\^doutb [70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(\^doutb [71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(\^doutb [72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(\^doutb [73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(\^doutb [74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(\^doutb [75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(\^doutb [76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(\^doutb [77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(\^doutb [78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(\^doutb [79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(\^doutb [80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(\^doutb [81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(\^doutb [82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(\^doutb [83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(\^doutb [84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(\^doutb [85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(\^doutb [86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(\^doutb [87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(\^doutb [88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(\^doutb [89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(\^doutb [90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(\^doutb [91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(\^doutb [92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(\^doutb [93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(\^doutb [94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(\^doutb [95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(\^doutb [96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(\^doutb [97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(\^doutb [98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(\^doutb [99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "137" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF({\gen_rd_b.doutb_reg0 [137],\gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_n_11 }),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "138" *) (* BYTE_WRITE_WIDTH_B = "138" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2208" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "138" *) (* P_MIN_WIDTH_DATA_A = "138" *) (* P_MIN_WIDTH_DATA_B = "138" *) 
(* P_MIN_WIDTH_DATA_ECC = "138" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "138" *) (* P_WIDTH_COL_WRITE_B = "138" *) (* READ_DATA_WIDTH_A = "138" *) 
(* READ_DATA_WIDTH_B = "138" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "138" *) (* WRITE_DATA_WIDTH_B = "138" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "140" *) 
(* rstb_loop_iter = "140" *) 
module rm_design_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [137:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [137:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [137:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [137:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [137:0]dina;
  wire [137:0]doutb;
  wire ena;
  wire enb;
  wire [137:0]\gen_rd_b.doutb_reg ;
  wire [137:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(doutb[100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(doutb[101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(doutb[102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(doutb[103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(doutb[104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(doutb[105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(doutb[106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(doutb[107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(doutb[108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(doutb[109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(doutb[110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(doutb[111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(doutb[112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(doutb[113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(doutb[114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(doutb[115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(doutb[116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(doutb[117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(doutb[118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(doutb[119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(doutb[120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(doutb[121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(doutb[122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(doutb[123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(doutb[124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(doutb[125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(doutb[126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(doutb[127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(doutb[128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(doutb[129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(doutb[130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(doutb[131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(doutb[132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(doutb[133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(doutb[134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(doutb[135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(doutb[136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(doutb[137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(doutb[68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(doutb[69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(doutb[70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(doutb[71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(doutb[72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(doutb[73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(doutb[74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(doutb[75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(doutb[76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(doutb[77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(doutb[78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(doutb[79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(doutb[80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(doutb[81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(doutb[82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(doutb[83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(doutb[84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(doutb[85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(doutb[86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(doutb[87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(doutb[88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(doutb[89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(doutb[90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(doutb[91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(doutb[92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(doutb[93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(doutb[94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(doutb[95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(doutb[96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(doutb[97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(doutb[98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(doutb[99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "137" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF({dina[137],1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule
`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "XILINX"
`pragma protect encrypt_agent_info = "Xilinx Encryption Tool 2020.2"
`pragma protect key_keyowner="Cadence Design Systems.", key_keyname="cds_rsa_key", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=64)
`pragma protect key_block
Z+9RrY3WfRfCPZZ6AEZ5pkP4VuSeqQJJpd+HO30nWYTAIU+s23eRZKG2SURheVyDgDNvktbV0tUh
aV3v3wejAA==

`pragma protect key_keyowner="Synopsys", key_keyname="SNPS-VCS-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
ZcFLuqLnxqc8UX0XB0pfnvbcLPpBlzqAB1yP3T7sNy9hw3PZ5dVu+3mKZC0dsz8pO3ikSlpTIXkD
aK6LVJbYNg6ys7eO4/qMxzN1pre6c7wJrsyZ4kj55T4Ja3keYJMnMA+JkPMq2dlu6DdLMcsG5AiN
N0pneJkz6Vi+ymtjUxo=

`pragma protect key_keyowner="Aldec", key_keyname="ALDEC15_001", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
drVFV0MFzym/jrWfXsSrJGtKRsUfnPy1jVA9lMMMUKcmarIChf0eNIkULMXtC240QmFMGtfat0Ca
8NdCoE2ze58hT1hAnVTy9BuNuKFiDzNmMtkDtynfh5XM5kfGg7btz5z6PZiSKGwSyfpg5Eg45T+e
cmTJaemIgY+DuP0nk8bZlu3x9HPQksNBaFc4fpdNbSk5ouFNEpUkBB5FO3AaehodIx0uUQE54QSM
OPUNw+sMZgrxywNHD60cEj+d5QsaL8AtkNxywzg++t2LK5ueswOuoiaedjfT81PGYaxCy0+HdJyQ
eEpLRtnbgDLljQU5/pKZMeWaQ6SkEKNOJCS0vQ==

`pragma protect key_keyowner="ATRENTA", key_keyname="ATR-SG-2015-RSA-3", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
Icdk1t2tx7MW24xf4cVQN8r3LG/BGsFth7PYoDfmhT833puwuFD4sIncNvFIaDntBs5El16HK1i6
ilmiSEbBRQgGR+7NaIK1hFoYot4x6llxfeGhLtzbGFURh/cdL8duVx9AoURGS+ngsL9FiocfdrR4
entvK2mCgHodB6Bp0bRgyrKj2D9g+R6oubaa4xPbEDjJUIRDM7BxUUEp3AUUkXzVFL3F+Fr24f4G
Jaa5JBGrKHUPm6M36ETFwGI+1/uQ5VDY2YsRavCbrt06eQbtDXJ1fNy1mjyE0SvdM4UfKtrlg4eJ
K5NIhT6NDsYY5e1KEvTYjkrFVWbAlAeE3B17hQ==

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VELOCE-RSA", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
URTCn5+8/DIfDLcJuvfi0HIx8Rw94eupar5QjSgrB6VQzCqTF4pqNPecWzfL345e6JQrhLh8jIrr
zf3EOb8TQICBaGo/APLhoWkcGZrK6dBSXXc96Zf2B5d9SFXucwADEZ1KZzzhqJe4Ye7Kt89tmpNN
YJxKzAhVhT21YeRQnJI=

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VERIF-SIM-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
bKmtryQgQBwIrXnymmejllLqyFFUWKfD/sa3MrF+UW7LgTmsoqhyNq2ypUUb3E9dJeUaPUWyiSpP
/RfMNoV32D1dHo1d1JfU6OGsIUEcyTw1Yc5t5Jlr19BQLsd9KSc06DcBomeG3tMLhUTcTseHrlUa
ljMjFCC07TVqZjzheu8qMx/yqsEL4mBQPKJPMTWyvdYoNmhITao10Q+XwQV2jZEfJVlmRR8dvQeH
9S3ZT2vgNd3IlEc7n/8K2jTtTvRfwhBP8g/Vme2wpSnThGwhepgKj4qR62Bx+CIO2dyh/mfvExDn
01Fo6MSnHf6/ADQshkawztadzAri/DkmdZwf8A==

`pragma protect key_keyowner="Real Intent", key_keyname="RI-RSA-KEY-1", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
tPE1N6vDflo/sxQOlDerOxf1q3Y1qlPYNRL8Xil1og/R8s4PaFW3PTKV6WMhnjrREDY1feVl9BoZ
kGe7FY7rF6sTEtvEuWRJVYD6m3aNIX3OGZ0txfYwKHPM5sMRUG1gOvblzgRbNId6ncyE9IYV7Y61
SO8sVq9kBBroKCS+DII+1I9N5KY6eaORsf16l9lFRFWr9mxZLDwJTY8F1IPP9ZBdyGMIEluAgJ9Z
RMUX2cEg8R4r+S19qfJnggWjIL2OJvUQOSJeqEXNVSXKbFCPz2T5ZNnC/2ExfQeQmzknruiioxZ7
kfl4nk8zAxL9iICOMMxcxOS75t+TT7GnZbHn5A==

`pragma protect key_keyowner="Xilinx", key_keyname="xilinxt_2020_08", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
hvW2ASnvfE0uIwH0j1mdA2GFJ0Tcuj7FACWUllu0lW0QP/ZvPd763LBKNWBiZiofjD/aIgU61Wqt
CBnXbJ+67Va0yPwU28LuFMeAP4sXQF4nK0LzZJaGKqv6hHbOM02aygU1NGFAjAUxQqI2SRBdtCZE
7a8zc/LWU8IpKeooP7CVuXGYXK4HbgpWXyoAE5ZdoQem6wESvHgcGxaT1vIHdPxdnIn1gwqpPJ/J
3Kj/QQYGfPIJff0xCCuZ3ysSLsWjrZ0fCzprmipVvIkcLOgbRpd1ALUCJuQ8zFhlweUXll99chEi
qIqkR1gdf5aH3sBDx1MaogNus+j6jQ6MVZdU3Q==

`pragma protect key_keyowner="Metrics Technologies Inc.", key_keyname="DSim", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
kJgIH/1VXUIQCY/XuSqS9/1/WIwuTyFpKBrg088WVD4eUIMQGHYAO8XiHD75dQnQYcE3KCcaQFIW
/SUUDG3JPSkDQVY93DQUIUNioHSghgJ0t7DHRHFKyqlu4rSql3halUGBq4gPgb/p0ySD8z6CaONA
02nLeTqgUdc7p/HbrSDiUatQOfGZMP38u59dB3NQFscUXMpUohMk25JZrZNf8ArL4rpYCOaoInHD
Rq4MEmM4T4dA2UsrHbnuMeO7HAQG+IGUyoOpZN2dIbWlVaiI99dAW2AMJs73lcU3FKjArXel6b44
AAr52PKrUYEkymIAyL96VQ2SlxqQD+nFs7aDKA==

`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 181104)
`pragma protect data_block
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
foSWYH7hhcn7dndlVggG
`pragma protect end_protected
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
