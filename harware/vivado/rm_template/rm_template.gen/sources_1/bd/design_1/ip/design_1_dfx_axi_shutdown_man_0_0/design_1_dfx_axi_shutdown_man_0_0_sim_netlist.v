// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2020.2 (lin64) Build 3064766 Wed Nov 18 09:12:47 MST 2020
// Date        : Fri Jun 25 01:07:01 2021
// Host        : avanpc running 64-bit Ubuntu 18.04.5 LTS
// Command     : write_verilog -force -mode funcsim
//               /home/avanpc/avanco/vivado_projects/dynamic_function_exchange/dfx_project/rm_template/rm_template.gen/sources_1/bd/design_1/ip/design_1_dfx_axi_shutdown_man_0_0/design_1_dfx_axi_shutdown_man_0_0_sim_netlist.v
// Design      : design_1_dfx_axi_shutdown_man_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xczu7ev-ffvc1156-2-e
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "design_1_dfx_axi_shutdown_man_0_0,dfx_axi_shutdown_manager_v1_0_0,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "dfx_axi_shutdown_manager_v1_0_0,Vivado 2020.2" *) 
(* NotValidForBitStream *)
module design_1_dfx_axi_shutdown_man_0_0
   (clk,
    resetn,
    shutdown_requested,
    in_shutdown,
    irq,
    wr_irq,
    rd_irq,
    wr_in_shutdown,
    rd_in_shutdown,
    request_shutdown,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clk_intf CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clk_intf, ASSOCIATED_BUSIF M_AXI:S_AXI:S_AXI_CTRL, ASSOCIATED_RESET resetn:reset, FREQ_HZ 240000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, CLK_DOMAIN design_1_clk_250MHz, INSERT_VIP 0" *) input clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 resetn_intf RST" *) (* x_interface_parameter = "XIL_INTERFACENAME resetn_intf, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input resetn;
  output shutdown_requested;
  output in_shutdown;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output irq;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 wr_irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME wr_irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output wr_irq;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 rd_irq_intf INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME rd_irq_intf, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output rd_irq;
  output wr_in_shutdown;
  output rd_in_shutdown;
  input request_shutdown;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 128, PROTOCOL AXI4, FREQ_HZ 240000000, ID_WIDTH 6, ADDR_WIDTH 31, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, MAX_BURST_LENGTH 4, PHASE 0.000, CLK_DOMAIN design_1_clk_250MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [5:0]s_axi_awid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [30:0]s_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input s_axi_awlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI AWUSER" *) input [0:0]s_axi_awuser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 128, PROTOCOL AXI4, FREQ_HZ 240000000, ID_WIDTH 6, ADDR_WIDTH 31, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN design_1_clk_250MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [5:0]m_axi_awid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [30:0]m_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output m_axi_awlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI AWUSER" *) output [0:0]m_axi_awuser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [127:0]s_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [15:0]s_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [127:0]m_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [15:0]m_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BID" *) output [5:0]s_axi_bid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BID" *) input [5:0]m_axi_bid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARID" *) input [5:0]s_axi_arid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [30:0]s_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input s_axi_arlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARUSER" *) input [0:0]s_axi_aruser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARID" *) output [5:0]m_axi_arid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [30:0]m_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output m_axi_arlock;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARUSER" *) output [0:0]m_axi_aruser;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RID" *) output [5:0]s_axi_rid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [127:0]s_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) input s_axi_rready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RID" *) input [5:0]m_axi_rid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [127:0]m_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) output m_axi_rready;

  wire clk;
  wire in_shutdown;
  wire irq;
  wire [30:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [5:0]m_axi_arid;
  wire [7:0]m_axi_arlen;
  wire m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire [0:0]m_axi_aruser;
  wire m_axi_arvalid;
  wire [30:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [5:0]m_axi_awid;
  wire [7:0]m_axi_awlen;
  wire m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire [0:0]m_axi_awuser;
  wire m_axi_awvalid;
  wire [5:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [127:0]m_axi_rdata;
  wire [5:0]m_axi_rid;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [127:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [15:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire rd_in_shutdown;
  wire rd_irq;
  wire request_shutdown;
  wire resetn;
  wire [30:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [5:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [30:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [5:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire [5:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [127:0]s_axi_rdata;
  wire [5:0]s_axi_rid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [127:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [15:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire shutdown_requested;
  wire wr_in_shutdown;
  wire wr_irq;
  wire NLW_U0_s_axi_ctrl_arready_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_awready_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_ctrl_wready_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_ctrl_bresp_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_ctrl_rdata_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_ctrl_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;

  (* C_CTRL_ADDR_WIDTH = "32" *) 
  (* C_CTRL_DATA_WIDTH = "32" *) 
  (* C_CTRL_INTERFACE_TYPE = "0" *) 
  (* C_DP_AXI_ADDR_WIDTH = "31" *) 
  (* C_DP_AXI_ARUSER_WIDTH = "1" *) 
  (* C_DP_AXI_AWUSER_WIDTH = "1" *) 
  (* C_DP_AXI_BUSER_WIDTH = "1" *) 
  (* C_DP_AXI_DATA_WIDTH = "128" *) 
  (* C_DP_AXI_ID_WIDTH = "6" *) 
  (* C_DP_AXI_RESP = "0" *) 
  (* C_DP_AXI_RUSER_WIDTH = "1" *) 
  (* C_DP_AXI_WUSER_WIDTH = "1" *) 
  (* C_DP_PROTOCOL = "AXI4MM" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_RESET_ACTIVE_LEVEL = "1'b0" *) 
  (* C_RP_IS_MASTER = "1'b1" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* is_du_within_envelope = "true" *) 
  design_1_dfx_axi_shutdown_man_0_0_dfx_axi_shutdown_manager_v1_0_0 U0
       (.clk(clk),
        .in_shutdown(in_shutdown),
        .irq(irq),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_arid(m_axi_arid),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_aruser(m_axi_aruser),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awid(m_axi_awid),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awuser(m_axi_awuser),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(m_axi_wvalid),
        .rd_in_shutdown(rd_in_shutdown),
        .rd_irq(rd_irq),
        .request_shutdown(request_shutdown),
        .reset(1'b0),
        .resetn(resetn),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arid(s_axi_arid),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arready(s_axi_arready),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_aruser(s_axi_aruser),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awuser(s_axi_awuser),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_ctrl_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_arready(NLW_U0_s_axi_ctrl_arready_UNCONNECTED),
        .s_axi_ctrl_arvalid(1'b0),
        .s_axi_ctrl_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_awready(NLW_U0_s_axi_ctrl_awready_UNCONNECTED),
        .s_axi_ctrl_awvalid(1'b0),
        .s_axi_ctrl_bready(1'b0),
        .s_axi_ctrl_bresp(NLW_U0_s_axi_ctrl_bresp_UNCONNECTED[1:0]),
        .s_axi_ctrl_bvalid(NLW_U0_s_axi_ctrl_bvalid_UNCONNECTED),
        .s_axi_ctrl_rdata(NLW_U0_s_axi_ctrl_rdata_UNCONNECTED[31:0]),
        .s_axi_ctrl_rready(1'b0),
        .s_axi_ctrl_rresp(NLW_U0_s_axi_ctrl_rresp_UNCONNECTED[1:0]),
        .s_axi_ctrl_rvalid(NLW_U0_s_axi_ctrl_rvalid_UNCONNECTED),
        .s_axi_ctrl_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_ctrl_wready(NLW_U0_s_axi_ctrl_wready_UNCONNECTED),
        .s_axi_ctrl_wvalid(1'b0),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rid(s_axi_rid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(s_axi_wvalid),
        .shutdown_requested(shutdown_requested),
        .wr_in_shutdown(wr_in_shutdown),
        .wr_irq(wr_irq));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_0
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_11
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_14
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_17
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_2
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_20
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_23
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_26
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_29
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_32
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_35
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_38
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_41
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_44
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_47
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_5
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_50
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_53
   (ram_empty_i0,
    Q,
    enb,
    leaving_empty0,
    E,
    ram_empty_i,
    \gen_pntr_flags_cc.ram_empty_i_reg ,
    \count_value_i_reg[0]_0 ,
    wr_clk);
  output ram_empty_i0;
  output [3:0]Q;
  input enb;
  input leaving_empty0;
  input [0:0]E;
  input ram_empty_i;
  input [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  input [0:0]\count_value_i_reg[0]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire [0:0]\count_value_i_reg[0]_0 ;
  wire enb;
  wire \gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ram_empty_i_reg ;
  wire going_empty1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ram_empty_i_i_1 
       (.I0(enb),
        .I1(going_empty1),
        .I2(leaving_empty0),
        .I3(E),
        .I4(ram_empty_i),
        .O(ram_empty_i0));
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ram_empty_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ),
        .O(going_empty1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ram_empty_i_i_3 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ram_empty_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ram_empty_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ram_empty_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ram_empty_i_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_8
   (ram_full_i0,
    leaving_empty0,
    enb,
    Q,
    E,
    full,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ,
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ,
    \count_value_i_reg[0]_0 ,
    rd_en,
    ram_empty_i,
    \count_value_i_reg[3]_0 ,
    wr_clk);
  output ram_full_i0;
  output leaving_empty0;
  output enb;
  output [3:0]Q;
  input [0:0]E;
  input full;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  input [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  input [1:0]\count_value_i_reg[0]_0 ;
  input rd_en;
  input ram_empty_i;
  input [0:0]\count_value_i_reg[3]_0 ;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire [1:0]\count_value_i_reg[0]_0 ;
  wire [0:0]\count_value_i_reg[3]_0 ;
  wire enb;
  wire full;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg ;
  wire [3:0]\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ;
  wire going_full1;
  wire leaving_empty0;
  wire ram_empty_i;
  wire ram_full_i0;
  wire rd_en;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__1 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(\count_value_i_reg[0]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[3]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(enb),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_1 
       (.I0(E),
        .I1(going_full1),
        .I2(leaving_empty0),
        .I3(enb),
        .I4(full),
        .O(ram_full_i0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ),
        .O(going_full1));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [3]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_empty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[0]),
        .I1(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [0]),
        .I2(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [2]),
        .I3(Q[2]),
        .I4(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg [1]),
        .I5(Q[1]),
        .O(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h00FD)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(\count_value_i_reg[0]_0 [1]),
        .I1(\count_value_i_reg[0]_0 [0]),
        .I2(rd_en),
        .I3(ram_empty_i),
        .O(enb));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_1
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_12
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_15
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_18
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_21
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_24
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_27
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_3
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_30
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_33
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_36
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_39
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_42
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_45
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_48
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_51
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_54
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_6
   (Q,
    \count_value_i_reg[1]_0 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [0:0]\count_value_i_reg[1]_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire [0:0]\count_value_i_reg[1]_0 ;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_9
   (Q,
    \count_value_i_reg[1]_0 ,
    rd_en,
    \count_value_i_reg[1]_1 ,
    E,
    wr_clk);
  output [3:0]Q;
  input [1:0]\count_value_i_reg[1]_0 ;
  input rd_en;
  input [0:0]\count_value_i_reg[1]_1 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire [1:0]\count_value_i_reg[1]_0 ;
  wire [0:0]\count_value_i_reg[1]_1 ;
  wire rd_en;
  wire wr_clk;

  LUT4 #(
    .INIT(16'h10EF)) 
    \count_value_i[0]_i_1__2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(\count_value_i_reg[1]_0 [1]),
        .I3(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FFFD00)) 
    \count_value_i[1]_i_1__2 
       (.I0(\count_value_i_reg[1]_0 [1]),
        .I1(\count_value_i_reg[1]_0 [0]),
        .I2(rd_en),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .S(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(\count_value_i_reg[1]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(\count_value_i_reg[1]_1 ));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire \gen_fwft.ram_regout_en ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [0:0]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb({\^dout ,\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [0]}),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_44 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_45 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_46 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_47 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_48 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_49 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .\count_value_i_reg[3] (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__4
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__4 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_26 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_27 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_28 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_29 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_30 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_31 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire \gen_fwft.ram_regout_en ;
  wire \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [0:0]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__5 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb({\^dout ,\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [0]}),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_20 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_1 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_21 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_22 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_23 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_24 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_25 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .\count_value_i_reg[3] (\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_n_0 ),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "1088" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "68" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "7" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__6
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [67:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "68" *) 
  (* BYTE_WRITE_WIDTH_B = "68" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "1088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "68" *) 
  (* P_MIN_WIDTH_DATA_A = "68" *) 
  (* P_MIN_WIDTH_DATA_B = "68" *) 
  (* P_MIN_WIDTH_DATA_ECC = "68" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "68" *) 
  (* P_WIDTH_COL_WRITE_B = "68" *) 
  (* READ_DATA_WIDTH_A = "68" *) 
  (* READ_DATA_WIDTH_B = "68" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "68" *) 
  (* WRITE_DATA_WIDTH_B = "68" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "68" *) 
  (* rstb_loop_iter = "68" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__6 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [67:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_50 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_51 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_52 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_53 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_54 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_55 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2336" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "146" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [145:0]din;
  wire [144:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [145:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [145:145]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[145] = \<const0> ;
  assign dout[144:0] = \^dout [144:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "146" *) 
  (* BYTE_WRITE_WIDTH_B = "146" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2336" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "146" *) 
  (* P_MIN_WIDTH_DATA_A = "146" *) 
  (* P_MIN_WIDTH_DATA_B = "146" *) 
  (* P_MIN_WIDTH_DATA_ECC = "146" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "146" *) 
  (* P_WIDTH_COL_WRITE_B = "146" *) 
  (* READ_DATA_WIDTH_A = "146" *) 
  (* READ_DATA_WIDTH_B = "146" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "146" *) 
  (* WRITE_DATA_WIDTH_B = "146" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "148" *) 
  (* rstb_loop_iter = "148" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [145:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [145],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_8 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_9 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_10 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_11 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_12 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_13 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2336" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "146" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [145:0]din;
  wire [145:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [145:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "146" *) 
  (* BYTE_WRITE_WIDTH_B = "146" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2336" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "146" *) 
  (* P_MIN_WIDTH_DATA_A = "146" *) 
  (* P_MIN_WIDTH_DATA_B = "146" *) 
  (* P_MIN_WIDTH_DATA_ECC = "146" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "146" *) 
  (* P_WIDTH_COL_WRITE_B = "146" *) 
  (* READ_DATA_WIDTH_A = "146" *) 
  (* READ_DATA_WIDTH_B = "146" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "146" *) 
  (* WRITE_DATA_WIDTH_B = "146" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "148" *) 
  (* rstb_loop_iter = "148" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[144:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [145:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_14 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_15 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_16 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_17 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_18 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_19 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "144" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "9" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "4" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [8:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [8:8]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "9" *) 
  (* BYTE_WRITE_WIDTH_B = "9" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "144" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "9" *) 
  (* P_MIN_WIDTH_DATA_A = "9" *) 
  (* P_MIN_WIDTH_DATA_B = "9" *) 
  (* P_MIN_WIDTH_DATA_ECC = "9" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "9" *) 
  (* P_WIDTH_COL_WRITE_B = "9" *) 
  (* READ_DATA_WIDTH_A = "9" *) 
  (* READ_DATA_WIDTH_B = "9" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "9" *) 
  (* WRITE_DATA_WIDTH_B = "9" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "12" *) 
  (* rstb_loop_iter = "12" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[7:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [8:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [8],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_0 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_1 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "144" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "9" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "4" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [8:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [8:8]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "9" *) 
  (* BYTE_WRITE_WIDTH_B = "9" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "144" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "9" *) 
  (* P_MIN_WIDTH_DATA_A = "9" *) 
  (* P_MIN_WIDTH_DATA_B = "9" *) 
  (* P_MIN_WIDTH_DATA_ECC = "9" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "9" *) 
  (* P_WIDTH_COL_WRITE_B = "9" *) 
  (* READ_DATA_WIDTH_A = "9" *) 
  (* READ_DATA_WIDTH_B = "9" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "9" *) 
  (* WRITE_DATA_WIDTH_B = "9" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "12" *) 
  (* rstb_loop_iter = "12" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({1'b0,din[7:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [8:0]),
        .doutb({\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED [8],\^dout }),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_2 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_3 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_4 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_5 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_6 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_7 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2208" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "138" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [137:0]din;
  wire [137:0]\^dout ;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [137:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;
  wire [136:136]\NLW_gen_sdpram.xpm_memory_base_inst_doutb_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[137] = \^dout [137];
  assign dout[136] = \<const0> ;
  assign dout[135:0] = \^dout [135:0];
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "138" *) 
  (* BYTE_WRITE_WIDTH_B = "138" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2208" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "138" *) 
  (* P_MIN_WIDTH_DATA_A = "138" *) 
  (* P_MIN_WIDTH_DATA_B = "138" *) 
  (* P_MIN_WIDTH_DATA_ECC = "138" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "138" *) 
  (* P_WIDTH_COL_WRITE_B = "138" *) 
  (* READ_DATA_WIDTH_A = "138" *) 
  (* READ_DATA_WIDTH_B = "138" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "138" *) 
  (* WRITE_DATA_WIDTH_B = "138" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "140" *) 
  (* rstb_loop_iter = "140" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [137:0]),
        .doutb(\^dout ),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_32 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_33 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_34 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_35 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_36 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_37 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* CASCADE_HEIGHT = "0" *) (* CDC_DEST_SYNC_FF = "2" *) (* COMMON_CLOCK = "1" *) 
(* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) 
(* EN_ADV_FEATURE = "16'b0000011100000111" *) (* EN_AE = "1'b0" *) (* EN_AF = "1'b0" *) 
(* EN_DVLD = "1'b0" *) (* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) 
(* EN_PF = "1'b1" *) (* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) 
(* EN_WACK = "1'b0" *) (* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) 
(* FIFO_MEMORY_TYPE = "1" *) (* FIFO_MEM_TYPE = "1" *) (* FIFO_READ_DEPTH = "16" *) 
(* FIFO_READ_LATENCY = "0" *) (* FIFO_SIZE = "2208" *) (* FIFO_WRITE_DEPTH = "16" *) 
(* FULL_RESET_VALUE = "0" *) (* FULL_RST_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) 
(* PE_THRESH_ADJ = "5" *) (* PE_THRESH_MAX = "11" *) (* PE_THRESH_MIN = "5" *) 
(* PF_THRESH_ADJ = "9" *) (* PF_THRESH_MAX = "11" *) (* PF_THRESH_MIN = "5" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* RD_DATA_COUNT_WIDTH = "4" *) 
(* RD_DC_WIDTH_EXT = "5" *) (* RD_LATENCY = "2" *) (* RD_MODE = "1" *) 
(* RD_PNTR_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) (* READ_MODE = "1" *) 
(* READ_MODE_LL = "1" *) (* RELATED_CLOCKS = "0" *) (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
(* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) (* WRITE_DATA_WIDTH = "138" *) 
(* WR_DATA_COUNT_WIDTH = "4" *) (* WR_DC_WIDTH_EXT = "5" *) (* WR_DEPTH_LOG = "4" *) 
(* WR_PNTR_WIDTH = "4" *) (* WR_RD_RATIO = "0" *) (* WR_WIDTH_LOG = "8" *) 
(* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) (* invalid = "0" *) 
(* keep_hierarchy = "soft" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output full_n;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [3:0]count_value_i__0;
  wire [1:0]curr_fwft_state;
  wire [137:0]din;
  wire [137:0]dout;
  wire empty;
  wire empty_fwft_i0;
  wire full;
  wire \gen_fwft.ram_regout_en ;
  wire leaving_empty0;
  wire [1:0]next_fwft_state__0;
  wire ram_empty_i;
  wire ram_empty_i0;
  wire ram_full_i0;
  wire ram_wr_en_pf;
  wire rd_en;
  wire [3:0]rd_pntr_ext;
  wire rdp_inst_n_2;
  wire rst;
  wire rst_d1;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_ext;
  wire wr_rst_busy;
  wire wrpp1_inst_n_0;
  wire wrpp1_inst_n_1;
  wire wrpp1_inst_n_2;
  wire wrpp1_inst_n_3;
  wire xpm_fifo_rst_inst_n_1;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [137:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h6A85)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_i),
        .O(next_fwft_state__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h7C)) 
    \FSM_sequential_gen_fwft.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state__0[1]));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[0]),
        .Q(curr_fwft_state[0]),
        .R(xpm_fifo_rst_inst_n_1));
  (* FSM_ENCODED_STATES = "invalid:00,stage1_valid:01,both_stages_valid:10,stage2_valid:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_fwft.curr_fwft_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(next_fwft_state__0[1]),
        .Q(curr_fwft_state[1]),
        .R(xpm_fifo_rst_inst_n_1));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hF380)) 
    \gen_fwft.empty_fwft_i_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(empty),
        .O(empty_fwft_i0));
  FDSE #(
    .INIT(1'b1)) 
    \gen_fwft.empty_fwft_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .Q(empty),
        .S(xpm_fifo_rst_inst_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i0),
        .Q(full),
        .R(xpm_fifo_rst_inst_n_1));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pntr_flags_cc.ram_empty_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_empty_i0),
        .Q(ram_empty_i),
        .S(xpm_fifo_rst_inst_n_1));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "138" *) 
  (* BYTE_WRITE_WIDTH_B = "138" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2208" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "138" *) 
  (* P_MIN_WIDTH_DATA_A = "138" *) 
  (* P_MIN_WIDTH_DATA_B = "138" *) 
  (* P_MIN_WIDTH_DATA_ECC = "138" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "138" *) 
  (* P_WIDTH_COL_WRITE_B = "138" *) 
  (* READ_DATA_WIDTH_A = "138" *) 
  (* READ_DATA_WIDTH_B = "138" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "2" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "138" *) 
  (* WRITE_DATA_WIDTH_B = "138" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "140" *) 
  (* rstb_loop_iter = "140" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2__2 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext),
        .addrb(rd_pntr_ext),
        .clka(wr_clk),
        .clkb(1'b0),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina({din[137],1'b0,din[135:0]}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [137:0]),
        .doutb(dout),
        .ena(ram_wr_en_pf),
        .enb(rdp_inst_n_2),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(\gen_fwft.ram_regout_en ),
        .rsta(1'b0),
        .rstb(xpm_fifo_rst_inst_n_1),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h62)) 
    \gen_sdpram.xpm_memory_base_inst_i_3 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .O(\gen_fwft.ram_regout_en ));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_38 rdp_inst
       (.E(ram_wr_en_pf),
        .Q(rd_pntr_ext),
        .\count_value_i_reg[0]_0 (curr_fwft_state),
        .\count_value_i_reg[3]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .full(full),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg (wr_pntr_ext),
        .\gen_pntr_flags_cc.ngen_full_rst_val.ram_full_i_reg_0 ({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_full_i0(ram_full_i0),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_39 rdpp1_inst
       (.E(rdp_inst_n_2),
        .Q(count_value_i__0),
        .\count_value_i_reg[1]_0 (curr_fwft_state),
        .\count_value_i_reg[1]_1 (xpm_fifo_rst_inst_n_1),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_40 rst_d1_inst
       (.Q(xpm_fifo_rst_inst_n_1),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized0_41 wrp_inst
       (.E(ram_wr_en_pf),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[0]_0 (xpm_fifo_rst_inst_n_1),
        .enb(rdp_inst_n_2),
        .\gen_pntr_flags_cc.ram_empty_i_reg (count_value_i__0),
        .leaving_empty0(leaving_empty0),
        .ram_empty_i(ram_empty_i),
        .ram_empty_i0(ram_empty_i0),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_counter_updn__parameterized1_42 wrpp1_inst
       (.E(ram_wr_en_pf),
        .Q({wrpp1_inst_n_0,wrpp1_inst_n_1,wrpp1_inst_n_2,wrpp1_inst_n_3}),
        .\count_value_i_reg[1]_0 (xpm_fifo_rst_inst_n_1),
        .wr_clk(wr_clk));
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_43 xpm_fifo_rst_inst
       (.E(ram_wr_en_pf),
        .Q(xpm_fifo_rst_inst_n_1),
        .full(full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_10
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_16
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_22
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_28
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_34
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_4
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_40
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_46
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_reg_bit_52
   (rst_d1,
    Q,
    wr_clk);
  output rst_d1;
  input [0:0]Q;
  input wr_clk;

  wire [0:0]Q;
  wire rst_d1;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(Q),
        .Q(rst_d1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_13
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_19
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_25
   (E,
    Q,
    wr_en,
    \count_value_i_reg[3] ,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input \count_value_i_reg[3] ;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire \count_value_i_reg[3] ;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\count_value_i_reg[3] ),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_31
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_37
   (E,
    Q,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_43
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_49
   (E,
    Q,
    wr_en,
    \count_value_i_reg[3] ,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  input wr_en;
  input \count_value_i_reg[3] ;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire \count_value_i_reg[3] ;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\count_value_i_reg[3] ),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_55
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_rst_7
   (E,
    Q,
    wr_rst_busy,
    wr_en,
    full,
    rst_d1,
    rst,
    wr_clk);
  output [0:0]E;
  output [0:0]Q;
  output wr_rst_busy;
  input wr_en;
  input full;
  input rst_d1;
  input rst;
  input wr_clk;

  wire [0:0]E;
  wire [0:0]Q;
  wire full;
  wire [1:0]\gen_rst_cc.fifo_wr_rst_cc ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rst;
  wire rst_d1;
  wire rst_i;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_cc.fifo_wr_rst_cc[2]_i_1 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [0]),
        .Q(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .S(rst_i));
  FDSE #(
    .INIT(1'b0)) 
    \gen_rst_cc.fifo_wr_rst_cc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_cc.fifo_wr_rst_cc [1]),
        .Q(Q),
        .S(rst_i));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(full),
        .I2(Q),
        .I3(rst_d1),
        .O(E));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(Q),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [0:0]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({\^dout ,NLW_xpm_fifo_base_inst_dout_UNCONNECTED[0]}),
        .empty(empty),
        .full(NLW_xpm_fifo_base_inst_full_UNCONNECTED),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__4
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__4 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:1]\^dout ;
  wire empty;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [0:0]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[67:1] = \^dout [67:1];
  assign dout[0] = \<const0> ;
  assign full = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__5 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({\^dout ,NLW_xpm_fifo_base_inst_dout_UNCONNECTED[0]}),
        .empty(empty),
        .full(NLW_xpm_fifo_base_inst_full_UNCONNECTED),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "68" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "68" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__6
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [67:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [67:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "1088" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "68" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "68" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "7" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__6 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "146" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized1
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [145:0]din;
  wire [144:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [145:145]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[145] = \<const0> ;
  assign dout[144:0] = \^dout [144:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2336" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "146" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "146" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[145],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "146" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "146" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized1__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [145:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [145:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [145:0]din;
  wire [145:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2336" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "146" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "146" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized0__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[144:0]}),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "9" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized3
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [8:8]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "144" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "9" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "9" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "4" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[7:0]}),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[8],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "9" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "9" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized3__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [8:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [8:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [8:0]din;
  wire [7:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [8:8]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7:0] = \^dout [7:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "144" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "9" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "9" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "4" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized1__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({1'b0,din[7:0]}),
        .dout({NLW_xpm_fifo_base_inst_dout_UNCONNECTED[8],\^dout }),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(rd_rst_busy));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "138" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized5
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [137:0]din;
  wire [137:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED;
  wire [136:136]NLW_xpm_fifo_base_inst_dout_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[137] = \^dout [137];
  assign dout[136] = \<const0> ;
  assign dout[135:0] = \^dout [135:0];
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2208" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "138" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "138" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din(din),
        .dout(\^dout ),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_xpm_fifo_base_inst_wr_rst_busy_UNCONNECTED));
endmodule

(* CASCADE_HEIGHT = "0" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_SYNC = "16'b0000011100000111" *) (* FIFO_MEMORY_TYPE = "distributed" *) (* FIFO_READ_LATENCY = "0" *) 
(* FIFO_WRITE_DEPTH = "16" *) (* FULL_RESET_VALUE = "0" *) (* ORIG_REF_NAME = "xpm_fifo_sync" *) 
(* PROG_EMPTY_THRESH = "7" *) (* PROG_FULL_THRESH = "11" *) (* P_COMMON_CLOCK = "1" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "1" *) (* P_READ_MODE = "1" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "4" *) (* READ_DATA_WIDTH = "138" *) 
(* READ_MODE = "fwft" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "0707" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "138" *) (* WR_DATA_COUNT_WIDTH = "4" *) 
(* XPM_MODULE = "TRUE" *) (* is_du_within_envelope = "true" *) (* keep_hierarchy = "soft" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_sync__parameterized5__2
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [137:0]din;
  output full;
  output prog_full;
  output [3:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_en;
  output [137:0]dout;
  output empty;
  output prog_empty;
  output [3:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire [137:0]din;
  wire [137:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire wr_clk;
  wire wr_en;
  wire NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_full_n_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_overflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_underflow_UNCONNECTED;
  wire NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign data_valid = \<const0> ;
  assign dbiterr = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CASCADE_HEIGHT = "0" *) 
  (* CDC_DEST_SYNC_FF = "2" *) 
  (* COMMON_CLOCK = "1" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0000011100000111" *) 
  (* EN_AE = "1'b0" *) 
  (* EN_AF = "1'b0" *) 
  (* EN_DVLD = "1'b0" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b0" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "1" *) 
  (* FIFO_MEM_TYPE = "1" *) 
  (* FIFO_READ_DEPTH = "16" *) 
  (* FIFO_READ_LATENCY = "0" *) 
  (* FIFO_SIZE = "2208" *) 
  (* FIFO_WRITE_DEPTH = "16" *) 
  (* FULL_RESET_VALUE = "0" *) 
  (* FULL_RST_VAL = "1'b0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* PE_THRESH_ADJ = "5" *) 
  (* PE_THRESH_MAX = "11" *) 
  (* PE_THRESH_MIN = "5" *) 
  (* PF_THRESH_ADJ = "9" *) 
  (* PF_THRESH_MAX = "11" *) 
  (* PF_THRESH_MIN = "5" *) 
  (* PROG_EMPTY_THRESH = "7" *) 
  (* PROG_FULL_THRESH = "11" *) 
  (* RD_DATA_COUNT_WIDTH = "4" *) 
  (* RD_DC_WIDTH_EXT = "5" *) 
  (* RD_LATENCY = "2" *) 
  (* RD_MODE = "1" *) 
  (* RD_PNTR_WIDTH = "4" *) 
  (* READ_DATA_WIDTH = "138" *) 
  (* READ_MODE = "1" *) 
  (* READ_MODE_LL = "1" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "0707" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "138" *) 
  (* WR_DATA_COUNT_WIDTH = "4" *) 
  (* WR_DC_WIDTH_EXT = "5" *) 
  (* WR_DEPTH_LOG = "4" *) 
  (* WR_PNTR_WIDTH = "4" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "8" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  design_1_dfx_axi_shutdown_man_0_0_xpm_fifo_base__parameterized2__2 xpm_fifo_base_inst
       (.almost_empty(NLW_xpm_fifo_base_inst_almost_empty_UNCONNECTED),
        .almost_full(NLW_xpm_fifo_base_inst_almost_full_UNCONNECTED),
        .data_valid(NLW_xpm_fifo_base_inst_data_valid_UNCONNECTED),
        .dbiterr(NLW_xpm_fifo_base_inst_dbiterr_UNCONNECTED),
        .din({din[137],1'b0,din[135:0]}),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(NLW_xpm_fifo_base_inst_full_n_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(NLW_xpm_fifo_base_inst_overflow_UNCONNECTED),
        .prog_empty(NLW_xpm_fifo_base_inst_prog_empty_UNCONNECTED),
        .prog_full(NLW_xpm_fifo_base_inst_prog_full_UNCONNECTED),
        .rd_clk(1'b0),
        .rd_data_count(NLW_xpm_fifo_base_inst_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_xpm_fifo_base_inst_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .sbiterr(NLW_xpm_fifo_base_inst_sbiterr_UNCONNECTED),
        .sleep(sleep),
        .underflow(NLW_xpm_fifo_base_inst_underflow_UNCONNECTED),
        .wr_ack(NLW_xpm_fifo_base_inst_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_xpm_fifo_base_inst_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst_busy(rd_rst_busy));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:1]\^doutb ;
  wire ena;
  wire enb;
  wire [67:1]\gen_rd_b.doutb_reg ;
  wire [67:1]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[67:1] = \^doutb [67:1];
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA({\gen_rd_b.doutb_reg0 [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 }),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:0]doutb;
  wire ena;
  wire enb;
  wire [67:0]\gen_rd_b.doutb_reg ;
  wire [67:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__5
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:1]\^doutb ;
  wire ena;
  wire enb;
  wire [67:1]\gen_rd_b.doutb_reg ;
  wire [67:1]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[67:1] = \^doutb [67:1];
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA({\gen_rd_b.doutb_reg0 [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_n_1 }),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "68" *) (* BYTE_WRITE_WIDTH_B = "68" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "1088" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "68" *) (* P_MIN_WIDTH_DATA_A = "68" *) (* P_MIN_WIDTH_DATA_B = "68" *) 
(* P_MIN_WIDTH_DATA_ECC = "68" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "68" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "68" *) (* P_WIDTH_COL_WRITE_B = "68" *) (* READ_DATA_WIDTH_A = "68" *) 
(* READ_DATA_WIDTH_B = "68" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "68" *) (* WRITE_DATA_WIDTH_B = "68" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "68" *) 
(* rstb_loop_iter = "68" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__6
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [67:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [67:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [67:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [67:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [67:0]dina;
  wire [67:0]doutb;
  wire ena;
  wire enb;
  wire [67:0]\gen_rd_b.doutb_reg ;
  wire [67:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "1088" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "67" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_67_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "146" *) (* BYTE_WRITE_WIDTH_B = "146" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2336" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "146" *) (* P_MIN_WIDTH_DATA_A = "146" *) (* P_MIN_WIDTH_DATA_B = "146" *) 
(* P_MIN_WIDTH_DATA_ECC = "146" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "146" *) (* P_WIDTH_COL_WRITE_B = "146" *) (* READ_DATA_WIDTH_A = "146" *) 
(* READ_DATA_WIDTH_B = "146" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "146" *) (* WRITE_DATA_WIDTH_B = "146" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "148" *) 
(* rstb_loop_iter = "148" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [145:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [145:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [145:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [145:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [145:0]dina;
  wire [144:0]\^doutb ;
  wire ena;
  wire enb;
  wire [144:0]\gen_rd_b.doutb_reg ;
  wire [144:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_n_4 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[145] = \<const0> ;
  assign douta[144] = \<const0> ;
  assign douta[143] = \<const0> ;
  assign douta[142] = \<const0> ;
  assign douta[141] = \<const0> ;
  assign douta[140] = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[145] = \<const0> ;
  assign doutb[144:0] = \^doutb [144:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[138] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [138]),
        .Q(\gen_rd_b.doutb_reg [138]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[139] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [139]),
        .Q(\gen_rd_b.doutb_reg [139]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[140] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [140]),
        .Q(\gen_rd_b.doutb_reg [140]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[141] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [141]),
        .Q(\gen_rd_b.doutb_reg [141]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[142] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [142]),
        .Q(\gen_rd_b.doutb_reg [142]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[143] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [143]),
        .Q(\gen_rd_b.doutb_reg [143]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[144] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [144]),
        .Q(\gen_rd_b.doutb_reg [144]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(\^doutb [100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(\^doutb [101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(\^doutb [102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(\^doutb [103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(\^doutb [104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(\^doutb [105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(\^doutb [106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(\^doutb [107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(\^doutb [108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(\^doutb [109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(\^doutb [110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(\^doutb [111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(\^doutb [112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(\^doutb [113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(\^doutb [114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(\^doutb [115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(\^doutb [116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(\^doutb [117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(\^doutb [118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(\^doutb [119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(\^doutb [120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(\^doutb [121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(\^doutb [122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(\^doutb [123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(\^doutb [124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(\^doutb [125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(\^doutb [126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(\^doutb [127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(\^doutb [128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(\^doutb [129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(\^doutb [130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(\^doutb [131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(\^doutb [132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(\^doutb [133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(\^doutb [134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(\^doutb [135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(\^doutb [136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(\^doutb [137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][138] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [138]),
        .Q(\^doutb [138]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][139] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [139]),
        .Q(\^doutb [139]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][140] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [140]),
        .Q(\^doutb [140]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][141] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [141]),
        .Q(\^doutb [141]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][142] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [142]),
        .Q(\^doutb [142]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][143] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [143]),
        .Q(\^doutb [143]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][144] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [144]),
        .Q(\^doutb [144]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(\^doutb [68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(\^doutb [69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(\^doutb [70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(\^doutb [71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(\^doutb [72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(\^doutb [73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(\^doutb [74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(\^doutb [75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(\^doutb [76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(\^doutb [77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(\^doutb [78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(\^doutb [79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(\^doutb [80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(\^doutb [81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(\^doutb [82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(\^doutb [83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(\^doutb [84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(\^doutb [85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(\^doutb [86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(\^doutb [87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(\^doutb [88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(\^doutb [89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(\^doutb [90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(\^doutb [91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(\^doutb [92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(\^doutb [93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(\^doutb [94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(\^doutb [95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(\^doutb [96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(\^doutb [97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(\^doutb [98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(\^doutb [99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "139" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG(dina[139:138]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\gen_rd_b.doutb_reg0 [139:138]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "140" *) 
  (* ram_slice_end = "145" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[141:140]),
        .DIB(dina[143:142]),
        .DIC(dina[145:144]),
        .DID({1'b0,1'b0}),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [141:140]),
        .DOB(\gen_rd_b.doutb_reg0 [143:142]),
        .DOC({\gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_n_4 ,\gen_rd_b.doutb_reg0 [144]}),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED [1:0]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "146" *) (* BYTE_WRITE_WIDTH_B = "146" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2336" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "146" *) (* P_MIN_WIDTH_DATA_A = "146" *) (* P_MIN_WIDTH_DATA_B = "146" *) 
(* P_MIN_WIDTH_DATA_ECC = "146" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "146" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "146" *) (* P_WIDTH_COL_WRITE_B = "146" *) (* READ_DATA_WIDTH_A = "146" *) 
(* READ_DATA_WIDTH_B = "146" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "146" *) (* WRITE_DATA_WIDTH_B = "146" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "148" *) 
(* rstb_loop_iter = "148" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized0__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [145:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [145:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [145:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [145:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [145:0]dina;
  wire [145:0]doutb;
  wire ena;
  wire enb;
  wire [145:0]\gen_rd_b.doutb_reg ;
  wire [145:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[145] = \<const0> ;
  assign douta[144] = \<const0> ;
  assign douta[143] = \<const0> ;
  assign douta[142] = \<const0> ;
  assign douta[141] = \<const0> ;
  assign douta[140] = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[138] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [138]),
        .Q(\gen_rd_b.doutb_reg [138]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[139] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [139]),
        .Q(\gen_rd_b.doutb_reg [139]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[140] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [140]),
        .Q(\gen_rd_b.doutb_reg [140]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[141] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [141]),
        .Q(\gen_rd_b.doutb_reg [141]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[142] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [142]),
        .Q(\gen_rd_b.doutb_reg [142]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[143] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [143]),
        .Q(\gen_rd_b.doutb_reg [143]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[144] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [144]),
        .Q(\gen_rd_b.doutb_reg [144]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[145] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [145]),
        .Q(\gen_rd_b.doutb_reg [145]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(doutb[100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(doutb[101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(doutb[102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(doutb[103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(doutb[104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(doutb[105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(doutb[106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(doutb[107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(doutb[108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(doutb[109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(doutb[110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(doutb[111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(doutb[112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(doutb[113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(doutb[114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(doutb[115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(doutb[116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(doutb[117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(doutb[118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(doutb[119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(doutb[120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(doutb[121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(doutb[122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(doutb[123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(doutb[124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(doutb[125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(doutb[126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(doutb[127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(doutb[128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(doutb[129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(doutb[130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(doutb[131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(doutb[132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(doutb[133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(doutb[134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(doutb[135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(doutb[136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(doutb[137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][138] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [138]),
        .Q(doutb[138]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][139] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [139]),
        .Q(doutb[139]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][140] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [140]),
        .Q(doutb[140]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][141] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [141]),
        .Q(doutb[141]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][142] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [142]),
        .Q(doutb[142]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][143] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [143]),
        .Q(doutb[143]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][144] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [144]),
        .Q(doutb[144]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][145] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [145]),
        .Q(doutb[145]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(doutb[68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(doutb[69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(doutb[70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(doutb[71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(doutb[72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(doutb[73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(doutb[74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(doutb[75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(doutb[76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(doutb[77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(doutb[78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(doutb[79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(doutb[80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(doutb[81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(doutb[82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(doutb[83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(doutb[84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(doutb[85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(doutb[86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(doutb[87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(doutb[88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(doutb[89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(doutb[90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(doutb[91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(doutb[92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(doutb[93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(doutb[94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(doutb[95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(doutb[96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(doutb[97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(doutb[98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(doutb[99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "139" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG(dina[139:138]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\gen_rd_b.doutb_reg0 [139:138]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_139_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "140" *) 
  (* ram_slice_end = "145" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[141:140]),
        .DIB(dina[143:142]),
        .DIC({1'b0,dina[144]}),
        .DID({1'b0,1'b0}),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [141:140]),
        .DOB(\gen_rd_b.doutb_reg0 [143:142]),
        .DOC(\gen_rd_b.doutb_reg0 [145:144]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOD_UNCONNECTED [1:0]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_140_145_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2336" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "9" *) (* BYTE_WRITE_WIDTH_B = "9" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "144" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "9" *) (* P_MIN_WIDTH_DATA_A = "9" *) (* P_MIN_WIDTH_DATA_B = "9" *) 
(* P_MIN_WIDTH_DATA_ECC = "9" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "9" *) (* P_WIDTH_COL_WRITE_B = "9" *) (* READ_DATA_WIDTH_A = "9" *) 
(* READ_DATA_WIDTH_B = "9" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "9" *) (* WRITE_DATA_WIDTH_B = "9" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "12" *) 
(* rstb_loop_iter = "12" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [8:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [8:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [8:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [8:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [8:0]dina;
  wire [7:0]\^doutb ;
  wire ena;
  wire enb;
  wire [7:0]\gen_rd_b.doutb_reg ;
  wire [7:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_n_9 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:1]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7:0] = \^doutb [7:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "144" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "8" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE({\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED [1],\gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_n_9 }),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "9" *) (* BYTE_WRITE_WIDTH_B = "9" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "144" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "9" *) (* P_MIN_WIDTH_DATA_A = "9" *) (* P_MIN_WIDTH_DATA_B = "9" *) 
(* P_MIN_WIDTH_DATA_ECC = "9" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "9" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "9" *) (* P_WIDTH_COL_WRITE_B = "9" *) (* READ_DATA_WIDTH_A = "9" *) 
(* READ_DATA_WIDTH_B = "9" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "9" *) (* WRITE_DATA_WIDTH_B = "9" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "12" *) 
(* rstb_loop_iter = "12" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized1__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [8:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [8:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [8:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [8:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [8:0]dina;
  wire [7:0]\^doutb ;
  wire ena;
  wire enb;
  wire [7:0]\gen_rd_b.doutb_reg ;
  wire [7:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7:0] = \^doutb [7:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "144" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "8" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE({1'b0,1'b0}),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOE_UNCONNECTED [1:0]),
        .DOF(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOF_UNCONNECTED [1:0]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_8_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "138" *) (* BYTE_WRITE_WIDTH_B = "138" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2208" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "138" *) (* P_MIN_WIDTH_DATA_A = "138" *) (* P_MIN_WIDTH_DATA_B = "138" *) 
(* P_MIN_WIDTH_DATA_ECC = "138" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "138" *) (* P_WIDTH_COL_WRITE_B = "138" *) (* READ_DATA_WIDTH_A = "138" *) 
(* READ_DATA_WIDTH_B = "138" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "138" *) (* WRITE_DATA_WIDTH_B = "138" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "140" *) 
(* rstb_loop_iter = "140" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [137:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [137:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [137:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [137:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [137:0]dina;
  wire [137:0]\^doutb ;
  wire ena;
  wire enb;
  wire [137:0]\gen_rd_b.doutb_reg ;
  wire [137:0]\gen_rd_b.doutb_reg0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_n_11 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign doutb[137] = \^doutb [137];
  assign doutb[136] = \<const0> ;
  assign doutb[135:0] = \^doutb [135:0];
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(\^doutb [0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(\^doutb [100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(\^doutb [101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(\^doutb [102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(\^doutb [103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(\^doutb [104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(\^doutb [105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(\^doutb [106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(\^doutb [107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(\^doutb [108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(\^doutb [109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(\^doutb [10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(\^doutb [110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(\^doutb [111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(\^doutb [112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(\^doutb [113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(\^doutb [114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(\^doutb [115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(\^doutb [116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(\^doutb [117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(\^doutb [118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(\^doutb [119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(\^doutb [11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(\^doutb [120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(\^doutb [121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(\^doutb [122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(\^doutb [123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(\^doutb [124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(\^doutb [125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(\^doutb [126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(\^doutb [127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(\^doutb [128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(\^doutb [129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(\^doutb [12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(\^doutb [130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(\^doutb [131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(\^doutb [132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(\^doutb [133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(\^doutb [134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(\^doutb [135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(\^doutb [137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(\^doutb [13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(\^doutb [14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(\^doutb [15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(\^doutb [16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(\^doutb [17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(\^doutb [18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(\^doutb [19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(\^doutb [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(\^doutb [20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(\^doutb [21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(\^doutb [22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(\^doutb [23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(\^doutb [24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(\^doutb [25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(\^doutb [26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(\^doutb [27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(\^doutb [28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(\^doutb [29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(\^doutb [2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(\^doutb [30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(\^doutb [31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(\^doutb [32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(\^doutb [33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(\^doutb [34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(\^doutb [35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(\^doutb [36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(\^doutb [37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(\^doutb [38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(\^doutb [39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(\^doutb [3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(\^doutb [40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(\^doutb [41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(\^doutb [42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(\^doutb [43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(\^doutb [44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(\^doutb [45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(\^doutb [46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(\^doutb [47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(\^doutb [48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(\^doutb [49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(\^doutb [4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(\^doutb [50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(\^doutb [51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(\^doutb [52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(\^doutb [53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(\^doutb [54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(\^doutb [55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(\^doutb [56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(\^doutb [57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(\^doutb [58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(\^doutb [59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(\^doutb [5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(\^doutb [60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(\^doutb [61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(\^doutb [62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(\^doutb [63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(\^doutb [64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(\^doutb [65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(\^doutb [66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(\^doutb [67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(\^doutb [68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(\^doutb [69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(\^doutb [6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(\^doutb [70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(\^doutb [71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(\^doutb [72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(\^doutb [73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(\^doutb [74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(\^doutb [75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(\^doutb [76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(\^doutb [77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(\^doutb [78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(\^doutb [79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(\^doutb [7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(\^doutb [80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(\^doutb [81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(\^doutb [82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(\^doutb [83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(\^doutb [84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(\^doutb [85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(\^doutb [86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(\^doutb [87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(\^doutb [88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(\^doutb [89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(\^doutb [8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(\^doutb [90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(\^doutb [91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(\^doutb [92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(\^doutb [93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(\^doutb [94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(\^doutb [95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(\^doutb [96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(\^doutb [97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(\^doutb [98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(\^doutb [99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(\^doutb [9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "137" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF(dina[137:136]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF({\gen_rd_b.doutb_reg0 [137],\gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_n_11 }),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "138" *) (* BYTE_WRITE_WIDTH_B = "138" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2208" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "138" *) (* P_MIN_WIDTH_DATA_A = "138" *) (* P_MIN_WIDTH_DATA_B = "138" *) 
(* P_MIN_WIDTH_DATA_ECC = "138" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "138" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "138" *) (* P_WIDTH_COL_WRITE_B = "138" *) (* READ_DATA_WIDTH_A = "138" *) 
(* READ_DATA_WIDTH_B = "138" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "2" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "138" *) (* WRITE_DATA_WIDTH_B = "138" *) 
(* WRITE_MODE_A = "2" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "140" *) 
(* rstb_loop_iter = "140" *) 
module design_1_dfx_axi_shutdown_man_0_0_xpm_memory_base__parameterized2__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [3:0]addra;
  input [137:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [137:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [137:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [137:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [3:0]addra;
  wire [3:0]addrb;
  wire clka;
  wire [137:0]dina;
  wire [137:0]doutb;
  wire ena;
  wire enb;
  wire [137:0]\gen_rd_b.doutb_reg ;
  wire [137:0]\gen_rd_b.doutb_reg0 ;
  wire regceb;
  wire rstb;
  wire sleep;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[0] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [0]),
        .Q(\gen_rd_b.doutb_reg [0]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[100] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [100]),
        .Q(\gen_rd_b.doutb_reg [100]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[101] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [101]),
        .Q(\gen_rd_b.doutb_reg [101]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[102] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [102]),
        .Q(\gen_rd_b.doutb_reg [102]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[103] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [103]),
        .Q(\gen_rd_b.doutb_reg [103]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[104] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [104]),
        .Q(\gen_rd_b.doutb_reg [104]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[105] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [105]),
        .Q(\gen_rd_b.doutb_reg [105]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[106] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [106]),
        .Q(\gen_rd_b.doutb_reg [106]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[107] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [107]),
        .Q(\gen_rd_b.doutb_reg [107]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[108] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [108]),
        .Q(\gen_rd_b.doutb_reg [108]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[109] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [109]),
        .Q(\gen_rd_b.doutb_reg [109]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[10] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [10]),
        .Q(\gen_rd_b.doutb_reg [10]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[110] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [110]),
        .Q(\gen_rd_b.doutb_reg [110]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[111] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [111]),
        .Q(\gen_rd_b.doutb_reg [111]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[112] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [112]),
        .Q(\gen_rd_b.doutb_reg [112]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[113] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [113]),
        .Q(\gen_rd_b.doutb_reg [113]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[114] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [114]),
        .Q(\gen_rd_b.doutb_reg [114]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[115] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [115]),
        .Q(\gen_rd_b.doutb_reg [115]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[116] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [116]),
        .Q(\gen_rd_b.doutb_reg [116]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[117] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [117]),
        .Q(\gen_rd_b.doutb_reg [117]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[118] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [118]),
        .Q(\gen_rd_b.doutb_reg [118]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[119] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [119]),
        .Q(\gen_rd_b.doutb_reg [119]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[11] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [11]),
        .Q(\gen_rd_b.doutb_reg [11]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[120] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [120]),
        .Q(\gen_rd_b.doutb_reg [120]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[121] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [121]),
        .Q(\gen_rd_b.doutb_reg [121]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[122] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [122]),
        .Q(\gen_rd_b.doutb_reg [122]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[123] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [123]),
        .Q(\gen_rd_b.doutb_reg [123]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[124] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [124]),
        .Q(\gen_rd_b.doutb_reg [124]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[125] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [125]),
        .Q(\gen_rd_b.doutb_reg [125]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[126] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [126]),
        .Q(\gen_rd_b.doutb_reg [126]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[127] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [127]),
        .Q(\gen_rd_b.doutb_reg [127]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[128] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [128]),
        .Q(\gen_rd_b.doutb_reg [128]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[129] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [129]),
        .Q(\gen_rd_b.doutb_reg [129]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[12] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [12]),
        .Q(\gen_rd_b.doutb_reg [12]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[130] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [130]),
        .Q(\gen_rd_b.doutb_reg [130]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[131] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [131]),
        .Q(\gen_rd_b.doutb_reg [131]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[132] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [132]),
        .Q(\gen_rd_b.doutb_reg [132]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[133] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [133]),
        .Q(\gen_rd_b.doutb_reg [133]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[134] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [134]),
        .Q(\gen_rd_b.doutb_reg [134]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[135] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [135]),
        .Q(\gen_rd_b.doutb_reg [135]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[136] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [136]),
        .Q(\gen_rd_b.doutb_reg [136]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[137] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [137]),
        .Q(\gen_rd_b.doutb_reg [137]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[13] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [13]),
        .Q(\gen_rd_b.doutb_reg [13]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[14] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [14]),
        .Q(\gen_rd_b.doutb_reg [14]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[15] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [15]),
        .Q(\gen_rd_b.doutb_reg [15]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[16] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [16]),
        .Q(\gen_rd_b.doutb_reg [16]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[17] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [17]),
        .Q(\gen_rd_b.doutb_reg [17]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[18] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [18]),
        .Q(\gen_rd_b.doutb_reg [18]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[19] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [19]),
        .Q(\gen_rd_b.doutb_reg [19]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[1] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [1]),
        .Q(\gen_rd_b.doutb_reg [1]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[20] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [20]),
        .Q(\gen_rd_b.doutb_reg [20]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[21] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [21]),
        .Q(\gen_rd_b.doutb_reg [21]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[22] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [22]),
        .Q(\gen_rd_b.doutb_reg [22]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[23] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [23]),
        .Q(\gen_rd_b.doutb_reg [23]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[24] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [24]),
        .Q(\gen_rd_b.doutb_reg [24]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[25] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [25]),
        .Q(\gen_rd_b.doutb_reg [25]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[26] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [26]),
        .Q(\gen_rd_b.doutb_reg [26]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[27] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [27]),
        .Q(\gen_rd_b.doutb_reg [27]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[28] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [28]),
        .Q(\gen_rd_b.doutb_reg [28]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[29] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [29]),
        .Q(\gen_rd_b.doutb_reg [29]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[2] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [2]),
        .Q(\gen_rd_b.doutb_reg [2]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[30] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [30]),
        .Q(\gen_rd_b.doutb_reg [30]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[31] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [31]),
        .Q(\gen_rd_b.doutb_reg [31]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[32] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [32]),
        .Q(\gen_rd_b.doutb_reg [32]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[33] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [33]),
        .Q(\gen_rd_b.doutb_reg [33]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[34] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [34]),
        .Q(\gen_rd_b.doutb_reg [34]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[35] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [35]),
        .Q(\gen_rd_b.doutb_reg [35]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[36] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [36]),
        .Q(\gen_rd_b.doutb_reg [36]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[37] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [37]),
        .Q(\gen_rd_b.doutb_reg [37]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[38] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [38]),
        .Q(\gen_rd_b.doutb_reg [38]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[39] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [39]),
        .Q(\gen_rd_b.doutb_reg [39]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[3] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [3]),
        .Q(\gen_rd_b.doutb_reg [3]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[40] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [40]),
        .Q(\gen_rd_b.doutb_reg [40]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[41] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [41]),
        .Q(\gen_rd_b.doutb_reg [41]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[42] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [42]),
        .Q(\gen_rd_b.doutb_reg [42]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[43] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [43]),
        .Q(\gen_rd_b.doutb_reg [43]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[44] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [44]),
        .Q(\gen_rd_b.doutb_reg [44]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[45] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [45]),
        .Q(\gen_rd_b.doutb_reg [45]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[46] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [46]),
        .Q(\gen_rd_b.doutb_reg [46]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[47] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [47]),
        .Q(\gen_rd_b.doutb_reg [47]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[48] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [48]),
        .Q(\gen_rd_b.doutb_reg [48]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[49] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [49]),
        .Q(\gen_rd_b.doutb_reg [49]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[4] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [4]),
        .Q(\gen_rd_b.doutb_reg [4]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[50] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [50]),
        .Q(\gen_rd_b.doutb_reg [50]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[51] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [51]),
        .Q(\gen_rd_b.doutb_reg [51]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[52] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [52]),
        .Q(\gen_rd_b.doutb_reg [52]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[53] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [53]),
        .Q(\gen_rd_b.doutb_reg [53]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[54] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [54]),
        .Q(\gen_rd_b.doutb_reg [54]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[55] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [55]),
        .Q(\gen_rd_b.doutb_reg [55]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[56] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [56]),
        .Q(\gen_rd_b.doutb_reg [56]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[57] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [57]),
        .Q(\gen_rd_b.doutb_reg [57]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[58] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [58]),
        .Q(\gen_rd_b.doutb_reg [58]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[59] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [59]),
        .Q(\gen_rd_b.doutb_reg [59]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[5] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [5]),
        .Q(\gen_rd_b.doutb_reg [5]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[60] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [60]),
        .Q(\gen_rd_b.doutb_reg [60]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[61] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [61]),
        .Q(\gen_rd_b.doutb_reg [61]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[62] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [62]),
        .Q(\gen_rd_b.doutb_reg [62]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[63] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [63]),
        .Q(\gen_rd_b.doutb_reg [63]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[64] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [64]),
        .Q(\gen_rd_b.doutb_reg [64]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[65] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [65]),
        .Q(\gen_rd_b.doutb_reg [65]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[66] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [66]),
        .Q(\gen_rd_b.doutb_reg [66]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[67] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [67]),
        .Q(\gen_rd_b.doutb_reg [67]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[68] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [68]),
        .Q(\gen_rd_b.doutb_reg [68]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[69] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [69]),
        .Q(\gen_rd_b.doutb_reg [69]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[6] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [6]),
        .Q(\gen_rd_b.doutb_reg [6]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[70] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [70]),
        .Q(\gen_rd_b.doutb_reg [70]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[71] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [71]),
        .Q(\gen_rd_b.doutb_reg [71]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[72] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [72]),
        .Q(\gen_rd_b.doutb_reg [72]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[73] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [73]),
        .Q(\gen_rd_b.doutb_reg [73]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[74] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [74]),
        .Q(\gen_rd_b.doutb_reg [74]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[75] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [75]),
        .Q(\gen_rd_b.doutb_reg [75]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[76] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [76]),
        .Q(\gen_rd_b.doutb_reg [76]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[77] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [77]),
        .Q(\gen_rd_b.doutb_reg [77]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[78] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [78]),
        .Q(\gen_rd_b.doutb_reg [78]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[79] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [79]),
        .Q(\gen_rd_b.doutb_reg [79]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[7] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [7]),
        .Q(\gen_rd_b.doutb_reg [7]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[80] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [80]),
        .Q(\gen_rd_b.doutb_reg [80]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[81] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [81]),
        .Q(\gen_rd_b.doutb_reg [81]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[82] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [82]),
        .Q(\gen_rd_b.doutb_reg [82]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[83] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [83]),
        .Q(\gen_rd_b.doutb_reg [83]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[84] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [84]),
        .Q(\gen_rd_b.doutb_reg [84]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[85] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [85]),
        .Q(\gen_rd_b.doutb_reg [85]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[86] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [86]),
        .Q(\gen_rd_b.doutb_reg [86]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[87] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [87]),
        .Q(\gen_rd_b.doutb_reg [87]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[88] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [88]),
        .Q(\gen_rd_b.doutb_reg [88]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[89] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [89]),
        .Q(\gen_rd_b.doutb_reg [89]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[8] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [8]),
        .Q(\gen_rd_b.doutb_reg [8]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[90] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [90]),
        .Q(\gen_rd_b.doutb_reg [90]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[91] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [91]),
        .Q(\gen_rd_b.doutb_reg [91]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[92] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [92]),
        .Q(\gen_rd_b.doutb_reg [92]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[93] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [93]),
        .Q(\gen_rd_b.doutb_reg [93]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[94] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [94]),
        .Q(\gen_rd_b.doutb_reg [94]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[95] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [95]),
        .Q(\gen_rd_b.doutb_reg [95]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[96] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [96]),
        .Q(\gen_rd_b.doutb_reg [96]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[97] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [97]),
        .Q(\gen_rd_b.doutb_reg [97]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[98] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [98]),
        .Q(\gen_rd_b.doutb_reg [98]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[99] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [99]),
        .Q(\gen_rd_b.doutb_reg [99]),
        .R(1'b0));
  (* dram_emb_xdc = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.doutb_reg_reg[9] 
       (.C(clka),
        .CE(enb),
        .D(\gen_rd_b.doutb_reg0 [9]),
        .Q(\gen_rd_b.doutb_reg [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][0] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [0]),
        .Q(doutb[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][100] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [100]),
        .Q(doutb[100]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][101] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [101]),
        .Q(doutb[101]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][102] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [102]),
        .Q(doutb[102]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][103] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [103]),
        .Q(doutb[103]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][104] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [104]),
        .Q(doutb[104]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][105] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [105]),
        .Q(doutb[105]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][106] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [106]),
        .Q(doutb[106]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][107] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [107]),
        .Q(doutb[107]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][108] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [108]),
        .Q(doutb[108]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][109] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [109]),
        .Q(doutb[109]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][10] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [10]),
        .Q(doutb[10]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][110] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [110]),
        .Q(doutb[110]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][111] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [111]),
        .Q(doutb[111]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][112] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [112]),
        .Q(doutb[112]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][113] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [113]),
        .Q(doutb[113]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][114] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [114]),
        .Q(doutb[114]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][115] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [115]),
        .Q(doutb[115]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][116] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [116]),
        .Q(doutb[116]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][117] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [117]),
        .Q(doutb[117]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][118] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [118]),
        .Q(doutb[118]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][119] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [119]),
        .Q(doutb[119]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][11] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [11]),
        .Q(doutb[11]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][120] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [120]),
        .Q(doutb[120]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][121] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [121]),
        .Q(doutb[121]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][122] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [122]),
        .Q(doutb[122]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][123] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [123]),
        .Q(doutb[123]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][124] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [124]),
        .Q(doutb[124]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][125] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [125]),
        .Q(doutb[125]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][126] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [126]),
        .Q(doutb[126]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][127] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [127]),
        .Q(doutb[127]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][128] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [128]),
        .Q(doutb[128]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][129] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [129]),
        .Q(doutb[129]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][12] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [12]),
        .Q(doutb[12]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][130] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [130]),
        .Q(doutb[130]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][131] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [131]),
        .Q(doutb[131]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][132] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [132]),
        .Q(doutb[132]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][133] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [133]),
        .Q(doutb[133]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][134] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [134]),
        .Q(doutb[134]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][135] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [135]),
        .Q(doutb[135]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][136] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [136]),
        .Q(doutb[136]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][137] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [137]),
        .Q(doutb[137]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][13] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [13]),
        .Q(doutb[13]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][14] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [14]),
        .Q(doutb[14]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][15] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [15]),
        .Q(doutb[15]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][16] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [16]),
        .Q(doutb[16]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][17] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [17]),
        .Q(doutb[17]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][18] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [18]),
        .Q(doutb[18]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][19] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [19]),
        .Q(doutb[19]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][1] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [1]),
        .Q(doutb[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][20] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [20]),
        .Q(doutb[20]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][21] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [21]),
        .Q(doutb[21]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][22] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [22]),
        .Q(doutb[22]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][23] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [23]),
        .Q(doutb[23]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][24] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [24]),
        .Q(doutb[24]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][25] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [25]),
        .Q(doutb[25]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][26] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [26]),
        .Q(doutb[26]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][27] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [27]),
        .Q(doutb[27]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][28] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [28]),
        .Q(doutb[28]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][29] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [29]),
        .Q(doutb[29]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][2] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [2]),
        .Q(doutb[2]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][30] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [30]),
        .Q(doutb[30]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][31] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [31]),
        .Q(doutb[31]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][32] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [32]),
        .Q(doutb[32]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][33] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [33]),
        .Q(doutb[33]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][34] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [34]),
        .Q(doutb[34]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][35] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [35]),
        .Q(doutb[35]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][36] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [36]),
        .Q(doutb[36]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][37] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [37]),
        .Q(doutb[37]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][38] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [38]),
        .Q(doutb[38]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][39] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [39]),
        .Q(doutb[39]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][3] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [3]),
        .Q(doutb[3]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][40] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [40]),
        .Q(doutb[40]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][41] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [41]),
        .Q(doutb[41]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][42] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [42]),
        .Q(doutb[42]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][43] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [43]),
        .Q(doutb[43]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][44] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [44]),
        .Q(doutb[44]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][45] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [45]),
        .Q(doutb[45]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][46] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [46]),
        .Q(doutb[46]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][47] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [47]),
        .Q(doutb[47]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][48] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [48]),
        .Q(doutb[48]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][49] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [49]),
        .Q(doutb[49]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][4] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [4]),
        .Q(doutb[4]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][50] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [50]),
        .Q(doutb[50]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][51] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [51]),
        .Q(doutb[51]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][52] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [52]),
        .Q(doutb[52]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][53] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [53]),
        .Q(doutb[53]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][54] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [54]),
        .Q(doutb[54]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][55] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [55]),
        .Q(doutb[55]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][56] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [56]),
        .Q(doutb[56]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][57] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [57]),
        .Q(doutb[57]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][58] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [58]),
        .Q(doutb[58]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][59] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [59]),
        .Q(doutb[59]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][5] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [5]),
        .Q(doutb[5]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][60] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [60]),
        .Q(doutb[60]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][61] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [61]),
        .Q(doutb[61]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][62] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [62]),
        .Q(doutb[62]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][63] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [63]),
        .Q(doutb[63]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][64] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [64]),
        .Q(doutb[64]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][65] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [65]),
        .Q(doutb[65]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][66] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [66]),
        .Q(doutb[66]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][67] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [67]),
        .Q(doutb[67]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][68] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [68]),
        .Q(doutb[68]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][69] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [69]),
        .Q(doutb[69]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][6] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [6]),
        .Q(doutb[6]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][70] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [70]),
        .Q(doutb[70]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][71] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [71]),
        .Q(doutb[71]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][72] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [72]),
        .Q(doutb[72]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][73] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [73]),
        .Q(doutb[73]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][74] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [74]),
        .Q(doutb[74]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][75] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [75]),
        .Q(doutb[75]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][76] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [76]),
        .Q(doutb[76]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][77] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [77]),
        .Q(doutb[77]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][78] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [78]),
        .Q(doutb[78]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][79] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [79]),
        .Q(doutb[79]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][7] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [7]),
        .Q(doutb[7]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][80] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [80]),
        .Q(doutb[80]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][81] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [81]),
        .Q(doutb[81]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][82] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [82]),
        .Q(doutb[82]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][83] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [83]),
        .Q(doutb[83]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][84] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [84]),
        .Q(doutb[84]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][85] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [85]),
        .Q(doutb[85]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][86] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [86]),
        .Q(doutb[86]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][87] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [87]),
        .Q(doutb[87]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][88] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [88]),
        .Q(doutb[88]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][89] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [89]),
        .Q(doutb[89]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][8] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [8]),
        .Q(doutb[8]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][90] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [90]),
        .Q(doutb[90]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][91] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [91]),
        .Q(doutb[91]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][92] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [92]),
        .Q(doutb[92]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][93] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [93]),
        .Q(doutb[93]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][94] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [94]),
        .Q(doutb[94]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][95] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [95]),
        .Q(doutb[95]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][96] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [96]),
        .Q(doutb[96]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][97] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [97]),
        .Q(doutb[97]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][98] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [98]),
        .Q(doutb[98]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][99] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [99]),
        .Q(doutb[99]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_b.gen_doutb_pipe.doutb_pipe_reg[0][9] 
       (.C(clka),
        .CE(regceb),
        .D(\gen_rd_b.doutb_reg [9]),
        .Q(doutb[9]),
        .R(rstb));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "13" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID(dina[7:6]),
        .DIE(dina[9:8]),
        .DIF(dina[11:10]),
        .DIG(dina[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [1:0]),
        .DOB(\gen_rd_b.doutb_reg0 [3:2]),
        .DOC(\gen_rd_b.doutb_reg0 [5:4]),
        .DOD(\gen_rd_b.doutb_reg0 [7:6]),
        .DOE(\gen_rd_b.doutb_reg0 [9:8]),
        .DOF(\gen_rd_b.doutb_reg0 [11:10]),
        .DOG(\gen_rd_b.doutb_reg0 [13:12]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_0_13_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "112" *) 
  (* ram_slice_end = "125" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[113:112]),
        .DIB(dina[115:114]),
        .DIC(dina[117:116]),
        .DID(dina[119:118]),
        .DIE(dina[121:120]),
        .DIF(dina[123:122]),
        .DIG(dina[125:124]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [113:112]),
        .DOB(\gen_rd_b.doutb_reg0 [115:114]),
        .DOC(\gen_rd_b.doutb_reg0 [117:116]),
        .DOD(\gen_rd_b.doutb_reg0 [119:118]),
        .DOE(\gen_rd_b.doutb_reg0 [121:120]),
        .DOF(\gen_rd_b.doutb_reg0 [123:122]),
        .DOG(\gen_rd_b.doutb_reg0 [125:124]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_112_125_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "126" *) 
  (* ram_slice_end = "137" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID(dina[133:132]),
        .DIE(dina[135:134]),
        .DIF({dina[137],1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [127:126]),
        .DOB(\gen_rd_b.doutb_reg0 [129:128]),
        .DOC(\gen_rd_b.doutb_reg0 [131:130]),
        .DOD(\gen_rd_b.doutb_reg0 [133:132]),
        .DOE(\gen_rd_b.doutb_reg0 [135:134]),
        .DOF(\gen_rd_b.doutb_reg0 [137:136]),
        .DOG(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOG_UNCONNECTED [1:0]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_126_137_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "27" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[15:14]),
        .DIB(dina[17:16]),
        .DIC(dina[19:18]),
        .DID(dina[21:20]),
        .DIE(dina[23:22]),
        .DIF(dina[25:24]),
        .DIG(dina[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [15:14]),
        .DOB(\gen_rd_b.doutb_reg0 [17:16]),
        .DOC(\gen_rd_b.doutb_reg0 [19:18]),
        .DOD(\gen_rd_b.doutb_reg0 [21:20]),
        .DOE(\gen_rd_b.doutb_reg0 [23:22]),
        .DOF(\gen_rd_b.doutb_reg0 [25:24]),
        .DOG(\gen_rd_b.doutb_reg0 [27:26]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_14_27_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "41" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[29:28]),
        .DIB(dina[31:30]),
        .DIC(dina[33:32]),
        .DID(dina[35:34]),
        .DIE(dina[37:36]),
        .DIF(dina[39:38]),
        .DIG(dina[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [29:28]),
        .DOB(\gen_rd_b.doutb_reg0 [31:30]),
        .DOC(\gen_rd_b.doutb_reg0 [33:32]),
        .DOD(\gen_rd_b.doutb_reg0 [35:34]),
        .DOE(\gen_rd_b.doutb_reg0 [37:36]),
        .DOF(\gen_rd_b.doutb_reg0 [39:38]),
        .DOG(\gen_rd_b.doutb_reg0 [41:40]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_28_41_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "55" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID(dina[49:48]),
        .DIE(dina[51:50]),
        .DIF(dina[53:52]),
        .DIG(dina[55:54]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [43:42]),
        .DOB(\gen_rd_b.doutb_reg0 [45:44]),
        .DOC(\gen_rd_b.doutb_reg0 [47:46]),
        .DOD(\gen_rd_b.doutb_reg0 [49:48]),
        .DOE(\gen_rd_b.doutb_reg0 [51:50]),
        .DOF(\gen_rd_b.doutb_reg0 [53:52]),
        .DOG(\gen_rd_b.doutb_reg0 [55:54]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_42_55_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "56" *) 
  (* ram_slice_end = "69" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[57:56]),
        .DIB(dina[59:58]),
        .DIC(dina[61:60]),
        .DID(dina[63:62]),
        .DIE(dina[65:64]),
        .DIF(dina[67:66]),
        .DIG(dina[69:68]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [57:56]),
        .DOB(\gen_rd_b.doutb_reg0 [59:58]),
        .DOC(\gen_rd_b.doutb_reg0 [61:60]),
        .DOD(\gen_rd_b.doutb_reg0 [63:62]),
        .DOE(\gen_rd_b.doutb_reg0 [65:64]),
        .DOF(\gen_rd_b.doutb_reg0 [67:66]),
        .DOG(\gen_rd_b.doutb_reg0 [69:68]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_56_69_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "70" *) 
  (* ram_slice_end = "83" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[71:70]),
        .DIB(dina[73:72]),
        .DIC(dina[75:74]),
        .DID(dina[77:76]),
        .DIE(dina[79:78]),
        .DIF(dina[81:80]),
        .DIG(dina[83:82]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [71:70]),
        .DOB(\gen_rd_b.doutb_reg0 [73:72]),
        .DOC(\gen_rd_b.doutb_reg0 [75:74]),
        .DOD(\gen_rd_b.doutb_reg0 [77:76]),
        .DOE(\gen_rd_b.doutb_reg0 [79:78]),
        .DOF(\gen_rd_b.doutb_reg0 [81:80]),
        .DOG(\gen_rd_b.doutb_reg0 [83:82]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_70_83_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "84" *) 
  (* ram_slice_end = "97" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID(dina[91:90]),
        .DIE(dina[93:92]),
        .DIF(dina[95:94]),
        .DIG(dina[97:96]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [85:84]),
        .DOB(\gen_rd_b.doutb_reg0 [87:86]),
        .DOC(\gen_rd_b.doutb_reg0 [89:88]),
        .DOD(\gen_rd_b.doutb_reg0 [91:90]),
        .DOE(\gen_rd_b.doutb_reg0 [93:92]),
        .DOF(\gen_rd_b.doutb_reg0 [95:94]),
        .DOG(\gen_rd_b.doutb_reg0 [97:96]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_84_97_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "2208" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "98" *) 
  (* ram_slice_end = "111" *) 
  RAM32M16 #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .INIT_E(64'h0000000000000000),
    .INIT_F(64'h0000000000000000),
    .INIT_G(64'h0000000000000000),
    .INIT_H(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111 
       (.ADDRA({1'b0,addrb}),
        .ADDRB({1'b0,addrb}),
        .ADDRC({1'b0,addrb}),
        .ADDRD({1'b0,addrb}),
        .ADDRE({1'b0,addrb}),
        .ADDRF({1'b0,addrb}),
        .ADDRG({1'b0,addrb}),
        .ADDRH({1'b0,addra}),
        .DIA(dina[99:98]),
        .DIB(dina[101:100]),
        .DIC(dina[103:102]),
        .DID(dina[105:104]),
        .DIE(dina[107:106]),
        .DIF(dina[109:108]),
        .DIG(dina[111:110]),
        .DIH({1'b0,1'b0}),
        .DOA(\gen_rd_b.doutb_reg0 [99:98]),
        .DOB(\gen_rd_b.doutb_reg0 [101:100]),
        .DOC(\gen_rd_b.doutb_reg0 [103:102]),
        .DOD(\gen_rd_b.doutb_reg0 [105:104]),
        .DOE(\gen_rd_b.doutb_reg0 [107:106]),
        .DOF(\gen_rd_b.doutb_reg0 [109:108]),
        .DOG(\gen_rd_b.doutb_reg0 [111:110]),
        .DOH(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_15_98_111_DOH_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(ena));
endmodule
`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "XILINX"
`pragma protect encrypt_agent_info = "Xilinx Encryption Tool 2020.2"
`pragma protect key_keyowner="Cadence Design Systems.", key_keyname="cds_rsa_key", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=64)
`pragma protect key_block
Z+9RrY3WfRfCPZZ6AEZ5pkP4VuSeqQJJpd+HO30nWYTAIU+s23eRZKG2SURheVyDgDNvktbV0tUh
aV3v3wejAA==

`pragma protect key_keyowner="Synopsys", key_keyname="SNPS-VCS-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
ZcFLuqLnxqc8UX0XB0pfnvbcLPpBlzqAB1yP3T7sNy9hw3PZ5dVu+3mKZC0dsz8pO3ikSlpTIXkD
aK6LVJbYNg6ys7eO4/qMxzN1pre6c7wJrsyZ4kj55T4Ja3keYJMnMA+JkPMq2dlu6DdLMcsG5AiN
N0pneJkz6Vi+ymtjUxo=

`pragma protect key_keyowner="Aldec", key_keyname="ALDEC15_001", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
drVFV0MFzym/jrWfXsSrJGtKRsUfnPy1jVA9lMMMUKcmarIChf0eNIkULMXtC240QmFMGtfat0Ca
8NdCoE2ze58hT1hAnVTy9BuNuKFiDzNmMtkDtynfh5XM5kfGg7btz5z6PZiSKGwSyfpg5Eg45T+e
cmTJaemIgY+DuP0nk8bZlu3x9HPQksNBaFc4fpdNbSk5ouFNEpUkBB5FO3AaehodIx0uUQE54QSM
OPUNw+sMZgrxywNHD60cEj+d5QsaL8AtkNxywzg++t2LK5ueswOuoiaedjfT81PGYaxCy0+HdJyQ
eEpLRtnbgDLljQU5/pKZMeWaQ6SkEKNOJCS0vQ==

`pragma protect key_keyowner="ATRENTA", key_keyname="ATR-SG-2015-RSA-3", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
Icdk1t2tx7MW24xf4cVQN8r3LG/BGsFth7PYoDfmhT833puwuFD4sIncNvFIaDntBs5El16HK1i6
ilmiSEbBRQgGR+7NaIK1hFoYot4x6llxfeGhLtzbGFURh/cdL8duVx9AoURGS+ngsL9FiocfdrR4
entvK2mCgHodB6Bp0bRgyrKj2D9g+R6oubaa4xPbEDjJUIRDM7BxUUEp3AUUkXzVFL3F+Fr24f4G
Jaa5JBGrKHUPm6M36ETFwGI+1/uQ5VDY2YsRavCbrt06eQbtDXJ1fNy1mjyE0SvdM4UfKtrlg4eJ
K5NIhT6NDsYY5e1KEvTYjkrFVWbAlAeE3B17hQ==

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VELOCE-RSA", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
URTCn5+8/DIfDLcJuvfi0HIx8Rw94eupar5QjSgrB6VQzCqTF4pqNPecWzfL345e6JQrhLh8jIrr
zf3EOb8TQICBaGo/APLhoWkcGZrK6dBSXXc96Zf2B5d9SFXucwADEZ1KZzzhqJe4Ye7Kt89tmpNN
YJxKzAhVhT21YeRQnJI=

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VERIF-SIM-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
bKmtryQgQBwIrXnymmejllLqyFFUWKfD/sa3MrF+UW7LgTmsoqhyNq2ypUUb3E9dJeUaPUWyiSpP
/RfMNoV32D1dHo1d1JfU6OGsIUEcyTw1Yc5t5Jlr19BQLsd9KSc06DcBomeG3tMLhUTcTseHrlUa
ljMjFCC07TVqZjzheu8qMx/yqsEL4mBQPKJPMTWyvdYoNmhITao10Q+XwQV2jZEfJVlmRR8dvQeH
9S3ZT2vgNd3IlEc7n/8K2jTtTvRfwhBP8g/Vme2wpSnThGwhepgKj4qR62Bx+CIO2dyh/mfvExDn
01Fo6MSnHf6/ADQshkawztadzAri/DkmdZwf8A==

`pragma protect key_keyowner="Real Intent", key_keyname="RI-RSA-KEY-1", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
tPE1N6vDflo/sxQOlDerOxf1q3Y1qlPYNRL8Xil1og/R8s4PaFW3PTKV6WMhnjrREDY1feVl9BoZ
kGe7FY7rF6sTEtvEuWRJVYD6m3aNIX3OGZ0txfYwKHPM5sMRUG1gOvblzgRbNId6ncyE9IYV7Y61
SO8sVq9kBBroKCS+DII+1I9N5KY6eaORsf16l9lFRFWr9mxZLDwJTY8F1IPP9ZBdyGMIEluAgJ9Z
RMUX2cEg8R4r+S19qfJnggWjIL2OJvUQOSJeqEXNVSXKbFCPz2T5ZNnC/2ExfQeQmzknruiioxZ7
kfl4nk8zAxL9iICOMMxcxOS75t+TT7GnZbHn5A==

`pragma protect key_keyowner="Xilinx", key_keyname="xilinxt_2020_08", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
hvW2ASnvfE0uIwH0j1mdA2GFJ0Tcuj7FACWUllu0lW0QP/ZvPd763LBKNWBiZiofjD/aIgU61Wqt
CBnXbJ+67Va0yPwU28LuFMeAP4sXQF4nK0LzZJaGKqv6hHbOM02aygU1NGFAjAUxQqI2SRBdtCZE
7a8zc/LWU8IpKeooP7CVuXGYXK4HbgpWXyoAE5ZdoQem6wESvHgcGxaT1vIHdPxdnIn1gwqpPJ/J
3Kj/QQYGfPIJff0xCCuZ3ysSLsWjrZ0fCzprmipVvIkcLOgbRpd1ALUCJuQ8zFhlweUXll99chEi
qIqkR1gdf5aH3sBDx1MaogNus+j6jQ6MVZdU3Q==

`pragma protect key_keyowner="Metrics Technologies Inc.", key_keyname="DSim", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
kJgIH/1VXUIQCY/XuSqS9/1/WIwuTyFpKBrg088WVD4eUIMQGHYAO8XiHD75dQnQYcE3KCcaQFIW
/SUUDG3JPSkDQVY93DQUIUNioHSghgJ0t7DHRHFKyqlu4rSql3halUGBq4gPgb/p0ySD8z6CaONA
02nLeTqgUdc7p/HbrSDiUatQOfGZMP38u59dB3NQFscUXMpUohMk25JZrZNf8ArL4rpYCOaoInHD
Rq4MEmM4T4dA2UsrHbnuMeO7HAQG+IGUyoOpZN2dIbWlVaiI99dAW2AMJs73lcU3FKjArXel6b44
AAr52PKrUYEkymIAyL96VQ2SlxqQD+nFs7aDKA==

`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 181056)
`pragma protect data_block
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
m1sBWK1329CCPv4FTBrq564IvWPXBZ7a
`pragma protect end_protected
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
